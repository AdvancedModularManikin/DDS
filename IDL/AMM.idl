struct FMA_Location
{
    long id;
    string description;
};

struct UUID
{
    long long UUID_MSB;
    long long UUID_LSB;
};

module AMM
{
    struct Version
    {
        unsigned short major;
        unsigned short minor;
        unsigned short patch;
    }

    module Event
    {
        struct Record
        {
            @Key UUID id;
            unsigned long long timestamp;
            FMA_Location location;
            string practitioner;
            string type;
            string data;
        };

        struct Fragment
        {
            @Key UUID id;
            unsigned long long timestamp;
            FMA_Location location;
            string practitioner;
            string type;
            string data;
        };

        enum FAR_Status {
            REQUESTING
           ,ACCEPTED
           ,DENIED
        }

        struct FragmentAmendmentRequest
        {
            @Key UUID id;
            UUID fragment_id;
            FAR_Status status;  // Requesting, Accepted, Denied
            // The values that can be amended
            unsigned long long timestamp;
            FMA_Location location;
            string practitioner;
            string type;
            string data;
        };
    };

    /*
    module Environment
    {
        struct Settings
        {
            string description;
        };
    };
    */

    module Simulation
    {
        enum ControlType {
            RUN
           ,PAUSE
           ,END
           ,SAVE
        }

        struct Control
        {
            unsigned long long timestamp;
            ControlType type;
        }
    };

    struct InstrumentData
    {
        string instrument;
        string payload;
    };

    module Physiology
    {
        struct Value
        {
            long long simulation_frame;
            unsigned long long timestamp;
            @Key string name;
            string unit;
            double dbl;
            string str;
        };

        struct Waveform
        {
            long long simulation_frame;
            unsigned long long timestamp;
            @Key string name;
            string unit;
            double dbl;
            string str;
        };

        struct Modification
        {
            @Key UUID id;
            UUID event_id;
            string data;    // TODO: Figure this out
        };

        /* FIXME: Standardize inputs to BioGears
        enum CMD {  // Known Pysiology Actions
          PainCommand
          ,SepsisCommand
        };

        enum TissueCompartment {
             BoneTissue
            ,FatTissue
            ,GutTissue
            ,LeftKidneyTissue
            ,LeftLungTissue
            ,LiverTissue
            ,MuscleTissue
            ,MyocardiumTissue
            ,RightKidneyTissue
            ,RightLungTissue
            ,SkinTissue
            ,SpleenTissue
        };
        struct Command {  //Command structure to embeded specific event types
           CMD type;
           sequence<char> payload;
        };


        module PainStimulus
        {
            struct Data
            {
                FMA_Location location;
                double severity;
            };
        };

        module Sepsis
        {
            struct Data
            {
                TissueCompartment location;
                double severity;
            };
        };

        struct Modification
        {
            UUID id;
            FMA_Location location;
            string practitioner;
            string type;
            string payload;
        };
    };

    module PatientAction
    {
        module BioGears
        {
            struct Command
            {
                string message;
            };
        };
        */ // End of FIXME
    };

    struct RenderModification
    {
        @Key UUID id;
        UUID event_id;
        string data;    // TODO: Standardize this
    };

    enum StatusValue {
        OPERATIONAL
       ,INOPERATIVE
       ,EXIGENT
    };

    struct Status
    {
        @Key UUID module_id;
        string module_name;
        @Key string capability;
        unsigned long long timestamp;
        StatusValue value;
        string message;
    }

    enum LogLevel {
        FATAL
       ,ERROR
       ,WARN
       ,INFO
       ,DEBUG
       ,TRACE
    }

    struct Log
    {
        unsigned long long timestamp;
        UUID module_id;
        LogLevel level;
        string message;
    };
};
