struct FMA_Location
{
    long FMAID;
    string description;
};

struct UUID
{
    long long UUID_MSB;
    long long UUID_LSB;
};

module AMM
{
    struct AMM_Version
    {
        unsigned short major;
        unsigned short minor;
        unsigned short patch;
    }

    struct EventRecord
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local (In case of module disconnect/reconnect)
         *  Liveliness: Automatic, 1 second lease
         *  Partition: AMM
         */
    {
        UUID id;
        unsigned long long timestamp;
        FMA_Location location;
        string practitioner;
        string type;
        string data;
    };

    struct EventFragment
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Volatile
         *  Partition: AMM
         */
    {
        UUID id;
        unsigned long long timestamp;
        FMA_Location location;
        string practitioner;
        string type;
        string data;
    };

    enum FAR_Status {
        REQUESTING
       ,ACCEPTED
       ,DENIED
    }

    struct FragmentAmendmentRequest
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Volatile
         *  Partition: AMM
         */
    {
        UUID id;
        UUID fragment_id;
        FAR_Status status;  // Requesting, Accepted, Denied
        // Values that can be amended
        unsigned long long timestamp;
        FMA_Location location;
        string practitioner;
        string type;
        string data;
    }

    /* Included in BioGears?
    module Environment
    {
        struct Settings
        {
            string description;
        };
    };
    */

    enum ControlType {
        RUN
       ,PAUSE
       ,END
       ,SAVE
    }

    struct SimulationControl
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Liveliness: Automatic, 1 second lease
         *  Partition: AMM
         */
    {
        unsigned long long timestamp;
        ControlType type;
    }

    struct InstrumentData
        /** QoS
         *  Reliability: Reliable
         *  Durability: Volatile
         *  Partition: AMM
         */
    {
        string instrument;
        string payload;
    };

    struct PhysiologyValue
        /** QoS:
         *  Reliability: Best Effort
         *  Durability: Transient Local
         *  Ownership: Exclusive
         *  Ownership Strength: Set via Configuration if non-zero
         *  Presentation: Access Scope: Instance, Coherent Access: True, Order Access: False
         *  Liveliness: Automatic, 1 second lease
         *  Partition: AMM
         */
    {
        long long simulation_frame;
        unsigned long long timestamp;
        @Key string name;   // BioGears node path
        string unit;
        double dbl;
        string str;
    };

    struct PhysiologyWaveform // Reliable delivery
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Ownership: Exclusive
         *  Ownership Strength: Set via Configuration if non-zero
         *  Liveliness: Automatic, 1 second lease (Lower if feasible, requires testing)
         *  Partition: AMM
         */
    {
        long long simulation_frame;
        unsigned long long timestamp;
        @Key string name;   // BioGears node path
        string unit;
        double dbl;
        string str;
    };

    struct PhysiologyModification
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Partition: AMM
         */
    {
        UUID id;
        UUID event_id;
        string data;    // TODO: Figure this out
    };

    /* FIXME: Standardize inputs to BioGears
    module Physiology
    {
        enum CMD {  // Known Pysiology Actions
          PainCommand
          ,SepsisCommand
        };

        enum TissueCompartment {
             BoneTissue
            ,FatTissue
            ,GutTissue
            ,LeftKidneyTissue
            ,LeftLungTissue
            ,LiverTissue
            ,MuscleTissue
            ,MyocardiumTissue
            ,RightKidneyTissue
            ,RightLungTissue
            ,SkinTissue
            ,SpleenTissue
        };
        struct Command {  //Command structure to embeded specific event types
           CMD type;
           sequence<char> payload;
        };


        module PainStimulus
        {
            struct Data
            {
                FMA_Location location;
                double severity;
            };
        };

        module Sepsis
        {
            struct Data
            {
                TissueCompartment location;
                double severity;
            };
        };

        struct Modification
        {
            UUID id;
            FMA_Location location;
            string practitioner;
            string type;
            string payload;
        };
    };

    module PatientAction
    {
        module BioGears
        {
            struct Command
            {
                string message;
            };
        };
    };
    */ // End of FIXME

    struct RenderModification
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Partition: AMM
         */
    {
        UUID id;
        UUID event_id;
        string data;    // TODO: Standardize this
    };

    enum StatusValue {
        OPERATIONAL
       ,INOPERATIVE
       ,EXIGENT
    };

    struct Status
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Liveliness: Automatic, 1 second lease
         *  Partition: AMM
         */
    {
        @Key UUID module_id;
        string module_name;
        @Key string capability;
        unsigned long long timestamp;
        StatusValue value;
        string message;
    }

    enum LogLevel {
        FATAL
       ,ERROR
       ,WARN
       ,INFO
       ,DEBUG
       ,TRACE
    }

    struct Log
        /** QoS:
         *  Reliability: Reliable
         *  Durability: Transient Local
         *  Partition: AMM
         */
    {
        unsigned long long timestamp;
        @Key UUID module_id;
        LogLevel level;
        string message;
    };
};
