module AMM
{
	struct FMA_Location
	{
		long id;
		string description;
	};	
		
	struct UUID
	{
		long long UUID_MSB;
		long long UUID_LSB;
	};

    module Event
    {
        struct Fragment
        {
            @Key UUID id;
            float timestamp;
            FMA_Location location;
            string learner_id;
            string fragment_type;
            string payload;
        };

        struct FragmentAmendmentRequest
        {
            UUID id;
            @Key UUID fragment_id;
            float timestamp;
            string status;  // Requesting, Accepted, Denied
            // The values that can be amended
            FMA_Location location;
            string learner_id;
            string fragment_type;
            string payload;
        };

        struct Record
        {
            @Key UUID id;
            float timestamp;
            FMA_Location location;
            string learner_id;
            string record_type;
            string payload;
        };
    };

    module Environment
    {
        struct Settings
        {
            string description;
        };
    };

    module Simulation
    {
        struct Tick
        {
            @Key long long frame;
            float time;
        };
    };

    struct InstrumentData
    {
        string instrument;
        string payload;
    };

    module Physiology
    {

        enum CMD {  // Known Pysiology Actions
          PainCommand
          ,SepsisCommand
        };

        enum TissueCompartment {
             BoneTissue
            ,FatTissue
            ,GutTissue
            ,LeftKidneyTissue
            ,LeftLungTissue
            ,LiverTissue
            ,MuscleTissue
            ,MyocardiumTissue
            ,RightKidneyTissue
            ,RightLungTissue
            ,SkinTissue
            ,SpleenTissue
        };
        struct Command {  //Command structure to embeded specific event types
           CMD type;
           sequence<char> payload;
        };


        module PainStimulus
        {
            struct Data
            {
                FMA_Location location;
                double severity;
            };
        };

        module Sepsis
        {
            struct Data
            {
                TissueCompartment location;
                double severity;
            };
        };

        struct Modification
        {
            UUID id;
            FMA_Location location;
            string practitioner;
            string type;
            string payload;
        };

        struct Node
        {
            @Key long long frame;
            @Key string nodepath;
            string unit;
            double dbl;
            string str;
        };

        struct HighFrequencyNode
        {
            @Key long long frame;
            @Key string nodepath;
            string unit;
            double dbl;
            string str;
        };
    };

    module Render
    {
        struct Modification
        {
            UUID id;
            FMA_Location location;
            string practitioner;
            string type;
            string payload;
        };
    };

    module PatientAction
    {
        module BioGears
        {
            struct Command
            {
                string message;
            };
        };
    };

    module Performance
    {
        struct xAPIModifier
        {
            string key;
            string value;
        };

        typedef sequence<xAPIModifier> xAPI_Modifiers;

        struct Statement
        {
            string noun;
            xAPI_Modifiers noun_modifiers;
            string verb;
            xAPI_Modifiers verb_modifiers;
            string obj;
            xAPI_Modifiers obj_modifiers;
        };

        struct Assessment
        {
            string Timestamp;
            string learner_id;
            FMA_Location location;
            string assessment_type;
            string assessment_info;
            string step;
            string comment;
        };
    };

    module Resource
    {
        module Requirement
        {
            struct Power
            {
                double volts;
                double amps;
            };

            struct Blood
            {
                double volume;
            };

            struct Clear_Liquid
            {
                double volume;
            };

            struct Air
            {

                double volume;
            };

            struct Cleaning_Solution
            {
                double volume;
            };
        };

        module Supply
        {
            struct Power
            {
                double volts;
                double amps;
            };

            struct Blood
            {
                double volume;
            };

            struct Clear_Liquid
            {
                double volume;
            };

            struct Air
            {
                double volume;
            };

            struct Cleaning_Solution
            {
                double volume;
            };
        };
    };

    module Capability
    { 
		enum status_values
		{
            OPERATIONAL,
            HALTING_ERROR,
            IMPENDING_ERROR
		};	
		
        struct Configuration
        {
            string module_id;
            string module_name;
            string manufacturer;
            string model;
            string serial_number;
            string version;            
            string capabilities;
        };

        struct Scenario
        {
            string id;
        };

        struct Status {
            string module_id;
            string module_name;
            string capability;
            status_values status_value;
            sequence<string> message;
        };
    };
	
	module Diagnostics
	{
		module Log {
			struct Record {				
				unsigned long long timestamp;				
				string log_level;
				string message;
				string module_name;
				string module_id;
			};
		};
	};
};
