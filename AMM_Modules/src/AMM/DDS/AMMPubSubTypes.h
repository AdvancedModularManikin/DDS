// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMMPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _AMM_PUBSUBTYPES_H_
#define _AMM_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

#include "AMM.h"

/*!
 * @brief This class represents the TopicDataType of the type FMA_Location defined by the user in the IDL file.
 * @ingroup AMM
 */
class FMA_LocationPubSubType : public eprosima::fastrtps::TopicDataType {
public:
        typedef FMA_Location type;

	FMA_LocationPubSubType();
	virtual ~FMA_LocationPubSubType();
	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type UUID defined by the user in the IDL file.
 * @ingroup AMM
 */
class UUIDPubSubType : public eprosima::fastrtps::TopicDataType {
public:
        typedef UUID type;

	UUIDPubSubType();
	virtual ~UUIDPubSubType();
	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
namespace AMM
{
    namespace Event
    {
        /*!
         * @brief This class represents the TopicDataType of the type Fragment defined by the user in the IDL file.
         * @ingroup AMM
         */
        class FragmentPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Fragment type;

        	FragmentPubSubType();
        	virtual ~FragmentPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type FragmentAmendmentRequest defined by the user in the IDL file.
         * @ingroup AMM
         */
        class FragmentAmendmentRequestPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef FragmentAmendmentRequest type;

        	FragmentAmendmentRequestPubSubType();
        	virtual ~FragmentAmendmentRequestPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Record defined by the user in the IDL file.
         * @ingroup AMM
         */
        class RecordPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Record type;

        	RecordPubSubType();
        	virtual ~RecordPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Environment
    {
        /*!
         * @brief This class represents the TopicDataType of the type Settings defined by the user in the IDL file.
         * @ingroup AMM
         */
        class SettingsPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Settings type;

        	SettingsPubSubType();
        	virtual ~SettingsPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Simulation
    {
        /*!
         * @brief This class represents the TopicDataType of the type Tick defined by the user in the IDL file.
         * @ingroup AMM
         */
        class TickPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Tick type;

        	TickPubSubType();
        	virtual ~TickPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    /*!
     * @brief This class represents the TopicDataType of the type InstrumentData defined by the user in the IDL file.
     * @ingroup AMM
     */
    class InstrumentDataPubSubType : public eprosima::fastrtps::TopicDataType {
    public:
            typedef InstrumentData type;

    	InstrumentDataPubSubType();
    	virtual ~InstrumentDataPubSubType();
    	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
            std::function<uint32_t()> getSerializedSizeProvider(void* data);
    	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
    	void* createData();
    	void deleteData(void * data);
    	MD5 m_md5;
    	unsigned char* m_keyBuffer;
    };
    namespace Physiology
    {


        /*!
         * @brief This class represents the TopicDataType of the type Command defined by the user in the IDL file.
         * @ingroup AMM
         */
        class CommandPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Command type;

        	CommandPubSubType();
        	virtual ~CommandPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        namespace PainStimulus
        {
            /*!
             * @brief This class represents the TopicDataType of the type Data defined by the user in the IDL file.
             * @ingroup AMM
             */
            class DataPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Data type;

            	DataPubSubType();
            	virtual ~DataPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
        namespace Sepsis
        {
            /*!
             * @brief This class represents the TopicDataType of the type Data defined by the user in the IDL file.
             * @ingroup AMM
             */
            class DataPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Data type;

            	DataPubSubType();
            	virtual ~DataPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
        /*!
         * @brief This class represents the TopicDataType of the type Modification defined by the user in the IDL file.
         * @ingroup AMM
         */
        class ModificationPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Modification type;

        	ModificationPubSubType();
        	virtual ~ModificationPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Node defined by the user in the IDL file.
         * @ingroup AMM
         */
        class NodePubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Node type;

        	NodePubSubType();
        	virtual ~NodePubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type HighFrequencyNode defined by the user in the IDL file.
         * @ingroup AMM
         */
        class HighFrequencyNodePubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef HighFrequencyNode type;

        	HighFrequencyNodePubSubType();
        	virtual ~HighFrequencyNodePubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Render
    {
        /*!
         * @brief This class represents the TopicDataType of the type Modification defined by the user in the IDL file.
         * @ingroup AMM
         */
        class ModificationPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Modification type;

        	ModificationPubSubType();
        	virtual ~ModificationPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace PatientAction
    {
        namespace BioGears
        {
            /*!
             * @brief This class represents the TopicDataType of the type Command defined by the user in the IDL file.
             * @ingroup AMM
             */
            class CommandPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Command type;

            	CommandPubSubType();
            	virtual ~CommandPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
    namespace Performance
    {
        /*!
         * @brief This class represents the TopicDataType of the type xAPIModifier defined by the user in the IDL file.
         * @ingroup AMM
         */
        class xAPIModifierPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef xAPIModifier type;

        	xAPIModifierPubSubType();
        	virtual ~xAPIModifierPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        typedef std::vector<AMM::Performance::xAPIModifier> xAPI_Modifiers;
        /*!
         * @brief This class represents the TopicDataType of the type Statement defined by the user in the IDL file.
         * @ingroup AMM
         */
        class StatementPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Statement type;

        	StatementPubSubType();
        	virtual ~StatementPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Assessment defined by the user in the IDL file.
         * @ingroup AMM
         */
        class AssessmentPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Assessment type;

        	AssessmentPubSubType();
        	virtual ~AssessmentPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Resource
    {
        namespace Requirement
        {
            /*!
             * @brief This class represents the TopicDataType of the type Power defined by the user in the IDL file.
             * @ingroup AMM
             */
            class PowerPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Power type;

            	PowerPubSubType();
            	virtual ~PowerPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Blood defined by the user in the IDL file.
             * @ingroup AMM
             */
            class BloodPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Blood type;

            	BloodPubSubType();
            	virtual ~BloodPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Clear_Liquid defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Clear_LiquidPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Clear_Liquid type;

            	Clear_LiquidPubSubType();
            	virtual ~Clear_LiquidPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Air defined by the user in the IDL file.
             * @ingroup AMM
             */
            class AirPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Air type;

            	AirPubSubType();
            	virtual ~AirPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Cleaning_Solution defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Cleaning_SolutionPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Cleaning_Solution type;

            	Cleaning_SolutionPubSubType();
            	virtual ~Cleaning_SolutionPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
        namespace Supply
        {
            /*!
             * @brief This class represents the TopicDataType of the type Power defined by the user in the IDL file.
             * @ingroup AMM
             */
            class PowerPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Power type;

            	PowerPubSubType();
            	virtual ~PowerPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Blood defined by the user in the IDL file.
             * @ingroup AMM
             */
            class BloodPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Blood type;

            	BloodPubSubType();
            	virtual ~BloodPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Clear_Liquid defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Clear_LiquidPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Clear_Liquid type;

            	Clear_LiquidPubSubType();
            	virtual ~Clear_LiquidPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Air defined by the user in the IDL file.
             * @ingroup AMM
             */
            class AirPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Air type;

            	AirPubSubType();
            	virtual ~AirPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type Cleaning_Solution defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Cleaning_SolutionPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Cleaning_Solution type;

            	Cleaning_SolutionPubSubType();
            	virtual ~Cleaning_SolutionPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
    namespace Capability
    {

        /*!
         * @brief This class represents the TopicDataType of the type AMM_version defined by the user in the IDL file.
         * @ingroup AMM
         */
        class AMM_versionPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef AMM_version type;

        	AMM_versionPubSubType();
        	virtual ~AMM_versionPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Configuration defined by the user in the IDL file.
         * @ingroup AMM
         */
        class ConfigurationPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Configuration type;

        	ConfigurationPubSubType();
        	virtual ~ConfigurationPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Scenario defined by the user in the IDL file.
         * @ingroup AMM
         */
        class ScenarioPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Scenario type;

        	ScenarioPubSubType();
        	virtual ~ScenarioPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type Status defined by the user in the IDL file.
         * @ingroup AMM
         */
        class StatusPubSubType : public eprosima::fastrtps::TopicDataType {
        public:
                typedef Status type;

        	StatusPubSubType();
        	virtual ~StatusPubSubType();
        	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
        	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Diagnostics
    {
        namespace Log
        {
            /*!
             * @brief This class represents the TopicDataType of the type Record defined by the user in the IDL file.
             * @ingroup AMM
             */
            class RecordPubSubType : public eprosima::fastrtps::TopicDataType {
            public:
                    typedef Record type;

            	RecordPubSubType();
            	virtual ~RecordPubSubType();
            	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
            	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
}

#endif // _AMM_PUBSUBTYPE_H_