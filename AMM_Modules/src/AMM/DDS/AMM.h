// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMM.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _AMM_DIAGNOSTICS_LOG_AMM_H_
#define _AMM_DIAGNOSTICS_LOG_AMM_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AMM_SOURCE)
#define AMM_DllAPI __declspec( dllexport )
#else
#define AMM_DllAPI __declspec( dllimport )
#endif // AMM_SOURCE
#else
#define AMM_DllAPI
#endif
#else
#define AMM_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure FMA_Location defined by the user in the IDL file.
 * @ingroup AMM
 */
class FMA_Location
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FMA_Location();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FMA_Location();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FMA_Location that will be copied.
     */
    eProsima_user_DllExport FMA_Location(const FMA_Location &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FMA_Location that will be copied.
     */
    eProsima_user_DllExport FMA_Location(FMA_Location &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FMA_Location that will be copied.
     */
    eProsima_user_DllExport FMA_Location& operator=(const FMA_Location &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FMA_Location that will be copied.
     */
    eProsima_user_DllExport FMA_Location& operator=(FMA_Location &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(int32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport int32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport int32_t& id()
    {
        return m_id;
    }
    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    inline eProsima_user_DllExport void description(const std::string &_description)
    {
        m_description = _description;
    }

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    inline eProsima_user_DllExport void description(std::string &&_description)
    {
        m_description = std::move(_description);
    }

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    inline eProsima_user_DllExport const std::string& description() const
    {
        return m_description;
    }

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    inline eProsima_user_DllExport std::string& description()
    {
        return m_description;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const FMA_Location& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_id;
    std::string m_description;
};
/*!
 * @brief This class represents the structure UUID defined by the user in the IDL file.
 * @ingroup AMM
 */
class UUID
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UUID();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UUID();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UUID that will be copied.
     */
    eProsima_user_DllExport UUID(const UUID &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UUID that will be copied.
     */
    eProsima_user_DllExport UUID(UUID &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UUID that will be copied.
     */
    eProsima_user_DllExport UUID& operator=(const UUID &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UUID that will be copied.
     */
    eProsima_user_DllExport UUID& operator=(UUID &&x);

    /*!
     * @brief This function sets a value in member UUID_MSB
     * @param _UUID_MSB New value for member UUID_MSB
     */
    inline eProsima_user_DllExport void UUID_MSB(int64_t _UUID_MSB)
    {
        m_UUID_MSB = _UUID_MSB;
    }

    /*!
     * @brief This function returns the value of member UUID_MSB
     * @return Value of member UUID_MSB
     */
    inline eProsima_user_DllExport int64_t UUID_MSB() const
    {
        return m_UUID_MSB;
    }

    /*!
     * @brief This function returns a reference to member UUID_MSB
     * @return Reference to member UUID_MSB
     */
    inline eProsima_user_DllExport int64_t& UUID_MSB()
    {
        return m_UUID_MSB;
    }
    /*!
     * @brief This function sets a value in member UUID_LSB
     * @param _UUID_LSB New value for member UUID_LSB
     */
    inline eProsima_user_DllExport void UUID_LSB(int64_t _UUID_LSB)
    {
        m_UUID_LSB = _UUID_LSB;
    }

    /*!
     * @brief This function returns the value of member UUID_LSB
     * @return Value of member UUID_LSB
     */
    inline eProsima_user_DllExport int64_t UUID_LSB() const
    {
        return m_UUID_LSB;
    }

    /*!
     * @brief This function returns a reference to member UUID_LSB
     * @return Reference to member UUID_LSB
     */
    inline eProsima_user_DllExport int64_t& UUID_LSB()
    {
        return m_UUID_LSB;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const UUID& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int64_t m_UUID_MSB;
    int64_t m_UUID_LSB;
};
namespace AMM
{
    namespace Event
    {
        /*!
         * @brief This class represents the structure Fragment defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Fragment
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Fragment();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Fragment();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Event::Fragment that will be copied.
             */
            eProsima_user_DllExport Fragment(const Fragment &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Event::Fragment that will be copied.
             */
            eProsima_user_DllExport Fragment(Fragment &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Event::Fragment that will be copied.
             */
            eProsima_user_DllExport Fragment& operator=(const Fragment &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Event::Fragment that will be copied.
             */
            eProsima_user_DllExport Fragment& operator=(Fragment &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const UUID &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(UUID &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const UUID& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport UUID& id()
            {
                return m_id;
            }
            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            inline eProsima_user_DllExport void timestamp(float _timestamp)
            {
                m_timestamp = _timestamp;
            }

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            inline eProsima_user_DllExport float timestamp() const
            {
                return m_timestamp;
            }

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            inline eProsima_user_DllExport float& timestamp()
            {
                return m_timestamp;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member learner_id
             * @param _learner_id New value to be copied in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(const std::string &_learner_id)
            {
                m_learner_id = _learner_id;
            }

            /*!
             * @brief This function moves the value in member learner_id
             * @param _learner_id New value to be moved in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(std::string &&_learner_id)
            {
                m_learner_id = std::move(_learner_id);
            }

            /*!
             * @brief This function returns a constant reference to member learner_id
             * @return Constant reference to member learner_id
             */
            inline eProsima_user_DllExport const std::string& learner_id() const
            {
                return m_learner_id;
            }

            /*!
             * @brief This function returns a reference to member learner_id
             * @return Reference to member learner_id
             */
            inline eProsima_user_DllExport std::string& learner_id()
            {
                return m_learner_id;
            }
            /*!
             * @brief This function copies the value in member fragment_type
             * @param _fragment_type New value to be copied in member fragment_type
             */
            inline eProsima_user_DllExport void fragment_type(const std::string &_fragment_type)
            {
                m_fragment_type = _fragment_type;
            }

            /*!
             * @brief This function moves the value in member fragment_type
             * @param _fragment_type New value to be moved in member fragment_type
             */
            inline eProsima_user_DllExport void fragment_type(std::string &&_fragment_type)
            {
                m_fragment_type = std::move(_fragment_type);
            }

            /*!
             * @brief This function returns a constant reference to member fragment_type
             * @return Constant reference to member fragment_type
             */
            inline eProsima_user_DllExport const std::string& fragment_type() const
            {
                return m_fragment_type;
            }

            /*!
             * @brief This function returns a reference to member fragment_type
             * @return Reference to member fragment_type
             */
            inline eProsima_user_DllExport std::string& fragment_type()
            {
                return m_fragment_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::string &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::string &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::string& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::string& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Event::Fragment& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            UUID m_id;
            float m_timestamp;
            FMA_Location m_location;
            std::string m_learner_id;
            std::string m_fragment_type;
            std::string m_payload;
        };
        /*!
         * @brief This class represents the structure FragmentAmendmentRequest defined by the user in the IDL file.
         * @ingroup AMM
         */
        class FragmentAmendmentRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport FragmentAmendmentRequest();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~FragmentAmendmentRequest();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Event::FragmentAmendmentRequest that will be copied.
             */
            eProsima_user_DllExport FragmentAmendmentRequest(const FragmentAmendmentRequest &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Event::FragmentAmendmentRequest that will be copied.
             */
            eProsima_user_DllExport FragmentAmendmentRequest(FragmentAmendmentRequest &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Event::FragmentAmendmentRequest that will be copied.
             */
            eProsima_user_DllExport FragmentAmendmentRequest& operator=(const FragmentAmendmentRequest &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Event::FragmentAmendmentRequest that will be copied.
             */
            eProsima_user_DllExport FragmentAmendmentRequest& operator=(FragmentAmendmentRequest &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const UUID &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(UUID &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const UUID& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport UUID& id()
            {
                return m_id;
            }
            /*!
             * @brief This function copies the value in member fragment_id
             * @param _fragment_id New value to be copied in member fragment_id
             */
            inline eProsima_user_DllExport void fragment_id(const UUID &_fragment_id)
            {
                m_fragment_id = _fragment_id;
            }

            /*!
             * @brief This function moves the value in member fragment_id
             * @param _fragment_id New value to be moved in member fragment_id
             */
            inline eProsima_user_DllExport void fragment_id(UUID &&_fragment_id)
            {
                m_fragment_id = std::move(_fragment_id);
            }

            /*!
             * @brief This function returns a constant reference to member fragment_id
             * @return Constant reference to member fragment_id
             */
            inline eProsima_user_DllExport const UUID& fragment_id() const
            {
                return m_fragment_id;
            }

            /*!
             * @brief This function returns a reference to member fragment_id
             * @return Reference to member fragment_id
             */
            inline eProsima_user_DllExport UUID& fragment_id()
            {
                return m_fragment_id;
            }
            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            inline eProsima_user_DllExport void timestamp(float _timestamp)
            {
                m_timestamp = _timestamp;
            }

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            inline eProsima_user_DllExport float timestamp() const
            {
                return m_timestamp;
            }

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            inline eProsima_user_DllExport float& timestamp()
            {
                return m_timestamp;
            }
            /*!
             * @brief This function copies the value in member status
             * @param _status New value to be copied in member status
             */
            inline eProsima_user_DllExport void status(const std::string &_status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function moves the value in member status
             * @param _status New value to be moved in member status
             */
            inline eProsima_user_DllExport void status(std::string &&_status)
            {
                m_status = std::move(_status);
            }

            /*!
             * @brief This function returns a constant reference to member status
             * @return Constant reference to member status
             */
            inline eProsima_user_DllExport const std::string& status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline eProsima_user_DllExport std::string& status()
            {
                return m_status;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member learner_id
             * @param _learner_id New value to be copied in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(const std::string &_learner_id)
            {
                m_learner_id = _learner_id;
            }

            /*!
             * @brief This function moves the value in member learner_id
             * @param _learner_id New value to be moved in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(std::string &&_learner_id)
            {
                m_learner_id = std::move(_learner_id);
            }

            /*!
             * @brief This function returns a constant reference to member learner_id
             * @return Constant reference to member learner_id
             */
            inline eProsima_user_DllExport const std::string& learner_id() const
            {
                return m_learner_id;
            }

            /*!
             * @brief This function returns a reference to member learner_id
             * @return Reference to member learner_id
             */
            inline eProsima_user_DllExport std::string& learner_id()
            {
                return m_learner_id;
            }
            /*!
             * @brief This function copies the value in member fragment_type
             * @param _fragment_type New value to be copied in member fragment_type
             */
            inline eProsima_user_DllExport void fragment_type(const std::string &_fragment_type)
            {
                m_fragment_type = _fragment_type;
            }

            /*!
             * @brief This function moves the value in member fragment_type
             * @param _fragment_type New value to be moved in member fragment_type
             */
            inline eProsima_user_DllExport void fragment_type(std::string &&_fragment_type)
            {
                m_fragment_type = std::move(_fragment_type);
            }

            /*!
             * @brief This function returns a constant reference to member fragment_type
             * @return Constant reference to member fragment_type
             */
            inline eProsima_user_DllExport const std::string& fragment_type() const
            {
                return m_fragment_type;
            }

            /*!
             * @brief This function returns a reference to member fragment_type
             * @return Reference to member fragment_type
             */
            inline eProsima_user_DllExport std::string& fragment_type()
            {
                return m_fragment_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::string &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::string &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::string& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::string& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Event::FragmentAmendmentRequest& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            UUID m_id;
            UUID m_fragment_id;
            float m_timestamp;
            std::string m_status;
            FMA_Location m_location;
            std::string m_learner_id;
            std::string m_fragment_type;
            std::string m_payload;
        };
        /*!
         * @brief This class represents the structure Record defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Record
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Record();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Record();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Event::Record that will be copied.
             */
            eProsima_user_DllExport Record(const Record &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Event::Record that will be copied.
             */
            eProsima_user_DllExport Record(Record &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Event::Record that will be copied.
             */
            eProsima_user_DllExport Record& operator=(const Record &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Event::Record that will be copied.
             */
            eProsima_user_DllExport Record& operator=(Record &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const UUID &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(UUID &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const UUID& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport UUID& id()
            {
                return m_id;
            }
            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            inline eProsima_user_DllExport void timestamp(float _timestamp)
            {
                m_timestamp = _timestamp;
            }

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            inline eProsima_user_DllExport float timestamp() const
            {
                return m_timestamp;
            }

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            inline eProsima_user_DllExport float& timestamp()
            {
                return m_timestamp;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member learner_id
             * @param _learner_id New value to be copied in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(const std::string &_learner_id)
            {
                m_learner_id = _learner_id;
            }

            /*!
             * @brief This function moves the value in member learner_id
             * @param _learner_id New value to be moved in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(std::string &&_learner_id)
            {
                m_learner_id = std::move(_learner_id);
            }

            /*!
             * @brief This function returns a constant reference to member learner_id
             * @return Constant reference to member learner_id
             */
            inline eProsima_user_DllExport const std::string& learner_id() const
            {
                return m_learner_id;
            }

            /*!
             * @brief This function returns a reference to member learner_id
             * @return Reference to member learner_id
             */
            inline eProsima_user_DllExport std::string& learner_id()
            {
                return m_learner_id;
            }
            /*!
             * @brief This function copies the value in member record_type
             * @param _record_type New value to be copied in member record_type
             */
            inline eProsima_user_DllExport void record_type(const std::string &_record_type)
            {
                m_record_type = _record_type;
            }

            /*!
             * @brief This function moves the value in member record_type
             * @param _record_type New value to be moved in member record_type
             */
            inline eProsima_user_DllExport void record_type(std::string &&_record_type)
            {
                m_record_type = std::move(_record_type);
            }

            /*!
             * @brief This function returns a constant reference to member record_type
             * @return Constant reference to member record_type
             */
            inline eProsima_user_DllExport const std::string& record_type() const
            {
                return m_record_type;
            }

            /*!
             * @brief This function returns a reference to member record_type
             * @return Reference to member record_type
             */
            inline eProsima_user_DllExport std::string& record_type()
            {
                return m_record_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::string &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::string &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::string& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::string& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Event::Record& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            UUID m_id;
            float m_timestamp;
            FMA_Location m_location;
            std::string m_learner_id;
            std::string m_record_type;
            std::string m_payload;
        };
    }
    namespace Environment
    {
        /*!
         * @brief This class represents the structure Settings defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Settings
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Settings();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Settings();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Environment::Settings that will be copied.
             */
            eProsima_user_DllExport Settings(const Settings &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Environment::Settings that will be copied.
             */
            eProsima_user_DllExport Settings(Settings &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Environment::Settings that will be copied.
             */
            eProsima_user_DllExport Settings& operator=(const Settings &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Environment::Settings that will be copied.
             */
            eProsima_user_DllExport Settings& operator=(Settings &&x);

            /*!
             * @brief This function copies the value in member description
             * @param _description New value to be copied in member description
             */
            inline eProsima_user_DllExport void description(const std::string &_description)
            {
                m_description = _description;
            }

            /*!
             * @brief This function moves the value in member description
             * @param _description New value to be moved in member description
             */
            inline eProsima_user_DllExport void description(std::string &&_description)
            {
                m_description = std::move(_description);
            }

            /*!
             * @brief This function returns a constant reference to member description
             * @return Constant reference to member description
             */
            inline eProsima_user_DllExport const std::string& description() const
            {
                return m_description;
            }

            /*!
             * @brief This function returns a reference to member description
             * @return Reference to member description
             */
            inline eProsima_user_DllExport std::string& description()
            {
                return m_description;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Environment::Settings& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_description;
        };
    }
    namespace Simulation
    {
        /*!
         * @brief This class represents the structure Tick defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Tick
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Tick();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Tick();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick(const Tick &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick(Tick &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick& operator=(const Tick &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick& operator=(Tick &&x);

            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function sets a value in member time
             * @param _time New value for member time
             */
            inline eProsima_user_DllExport void time(float _time)
            {
                m_time = _time;
            }

            /*!
             * @brief This function returns the value of member time
             * @return Value of member time
             */
            inline eProsima_user_DllExport float time() const
            {
                return m_time;
            }

            /*!
             * @brief This function returns a reference to member time
             * @return Reference to member time
             */
            inline eProsima_user_DllExport float& time()
            {
                return m_time;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Simulation::Tick& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            int64_t m_frame;
            float m_time;
        };
    }
    /*!
     * @brief This class represents the structure InstrumentData defined by the user in the IDL file.
     * @ingroup AMM
     */
    class InstrumentData
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport InstrumentData();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~InstrumentData();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::InstrumentData that will be copied.
         */
        eProsima_user_DllExport InstrumentData(const InstrumentData &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::InstrumentData that will be copied.
         */
        eProsima_user_DllExport InstrumentData(InstrumentData &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::InstrumentData that will be copied.
         */
        eProsima_user_DllExport InstrumentData& operator=(const InstrumentData &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::InstrumentData that will be copied.
         */
        eProsima_user_DllExport InstrumentData& operator=(InstrumentData &&x);

        /*!
         * @brief This function copies the value in member instrument
         * @param _instrument New value to be copied in member instrument
         */
        inline eProsima_user_DllExport void instrument(const std::string &_instrument)
        {
            m_instrument = _instrument;
        }

        /*!
         * @brief This function moves the value in member instrument
         * @param _instrument New value to be moved in member instrument
         */
        inline eProsima_user_DllExport void instrument(std::string &&_instrument)
        {
            m_instrument = std::move(_instrument);
        }

        /*!
         * @brief This function returns a constant reference to member instrument
         * @return Constant reference to member instrument
         */
        inline eProsima_user_DllExport const std::string& instrument() const
        {
            return m_instrument;
        }

        /*!
         * @brief This function returns a reference to member instrument
         * @return Reference to member instrument
         */
        inline eProsima_user_DllExport std::string& instrument()
        {
            return m_instrument;
        }
        /*!
         * @brief This function copies the value in member payload
         * @param _payload New value to be copied in member payload
         */
        inline eProsima_user_DllExport void payload(const std::string &_payload)
        {
            m_payload = _payload;
        }

        /*!
         * @brief This function moves the value in member payload
         * @param _payload New value to be moved in member payload
         */
        inline eProsima_user_DllExport void payload(std::string &&_payload)
        {
            m_payload = std::move(_payload);
        }

        /*!
         * @brief This function returns a constant reference to member payload
         * @return Constant reference to member payload
         */
        inline eProsima_user_DllExport const std::string& payload() const
        {
            return m_payload;
        }

        /*!
         * @brief This function returns a reference to member payload
         * @return Reference to member payload
         */
        inline eProsima_user_DllExport std::string& payload()
        {
            return m_payload;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::InstrumentData& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_instrument;
        std::string m_payload;
    };
    namespace Physiology
    {
        /*!
         * @brief This class represents the enumeration CMD defined by the user in the IDL file.
         * @ingroup AMM
         */
        enum CMD : uint32_t
        {
            PainCommand,
            SepsisCommand
        };
        /*!
         * @brief This class represents the enumeration TissueCompartment defined by the user in the IDL file.
         * @ingroup AMM
         */
        enum TissueCompartment : uint32_t
        {
            BoneTissue,
            FatTissue,
            GutTissue,
            LeftKidneyTissue,
            LeftLungTissue,
            LiverTissue,
            MuscleTissue,
            MyocardiumTissue,
            RightKidneyTissue,
            RightLungTissue,
            SkinTissue,
            SpleenTissue
        };
        /*!
         * @brief This class represents the structure Command defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Command
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Command();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Command();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::Command that will be copied.
             */
            eProsima_user_DllExport Command(const Command &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::Command that will be copied.
             */
            eProsima_user_DllExport Command(Command &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::Command that will be copied.
             */
            eProsima_user_DllExport Command& operator=(const Command &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::Command that will be copied.
             */
            eProsima_user_DllExport Command& operator=(Command &&x);

            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            inline eProsima_user_DllExport void type(AMM::Physiology::CMD _type)
            {
                m_type = _type;
            }

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            inline eProsima_user_DllExport AMM::Physiology::CMD type() const
            {
                return m_type;
            }

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            inline eProsima_user_DllExport AMM::Physiology::CMD& type()
            {
                return m_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::vector<char> &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::vector<char> &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::vector<char>& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::vector<char>& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::Command& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            AMM::Physiology::CMD m_type;
            std::vector<char> m_payload;
        };
        namespace PainStimulus
        {
            /*!
             * @brief This class represents the structure Data defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Data
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Data();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Data();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Physiology::PainStimulus::Data that will be copied.
                 */
                eProsima_user_DllExport Data(const Data &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Physiology::PainStimulus::Data that will be copied.
                 */
                eProsima_user_DllExport Data(Data &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Physiology::PainStimulus::Data that will be copied.
                 */
                eProsima_user_DllExport Data& operator=(const Data &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Physiology::PainStimulus::Data that will be copied.
                 */
                eProsima_user_DllExport Data& operator=(Data &&x);

                /*!
                 * @brief This function copies the value in member location
                 * @param _location New value to be copied in member location
                 */
                inline eProsima_user_DllExport void location(const FMA_Location &_location)
                {
                    m_location = _location;
                }

                /*!
                 * @brief This function moves the value in member location
                 * @param _location New value to be moved in member location
                 */
                inline eProsima_user_DllExport void location(FMA_Location &&_location)
                {
                    m_location = std::move(_location);
                }

                /*!
                 * @brief This function returns a constant reference to member location
                 * @return Constant reference to member location
                 */
                inline eProsima_user_DllExport const FMA_Location& location() const
                {
                    return m_location;
                }

                /*!
                 * @brief This function returns a reference to member location
                 * @return Reference to member location
                 */
                inline eProsima_user_DllExport FMA_Location& location()
                {
                    return m_location;
                }
                /*!
                 * @brief This function sets a value in member severity
                 * @param _severity New value for member severity
                 */
                inline eProsima_user_DllExport void severity(double _severity)
                {
                    m_severity = _severity;
                }

                /*!
                 * @brief This function returns the value of member severity
                 * @return Value of member severity
                 */
                inline eProsima_user_DllExport double severity() const
                {
                    return m_severity;
                }

                /*!
                 * @brief This function returns a reference to member severity
                 * @return Reference to member severity
                 */
                inline eProsima_user_DllExport double& severity()
                {
                    return m_severity;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::PainStimulus::Data& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                FMA_Location m_location;
                double m_severity;
            };
        }
        namespace Sepsis
        {
            /*!
             * @brief This class represents the structure Data defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Data
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Data();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Data();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Physiology::Sepsis::Data that will be copied.
                 */
                eProsima_user_DllExport Data(const Data &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Physiology::Sepsis::Data that will be copied.
                 */
                eProsima_user_DllExport Data(Data &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Physiology::Sepsis::Data that will be copied.
                 */
                eProsima_user_DllExport Data& operator=(const Data &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Physiology::Sepsis::Data that will be copied.
                 */
                eProsima_user_DllExport Data& operator=(Data &&x);

                /*!
                 * @brief This function sets a value in member location
                 * @param _location New value for member location
                 */
                inline eProsima_user_DllExport void location(AMM::Physiology::TissueCompartment _location)
                {
                    m_location = _location;
                }

                /*!
                 * @brief This function returns the value of member location
                 * @return Value of member location
                 */
                inline eProsima_user_DllExport AMM::Physiology::TissueCompartment location() const
                {
                    return m_location;
                }

                /*!
                 * @brief This function returns a reference to member location
                 * @return Reference to member location
                 */
                inline eProsima_user_DllExport AMM::Physiology::TissueCompartment& location()
                {
                    return m_location;
                }
                /*!
                 * @brief This function sets a value in member severity
                 * @param _severity New value for member severity
                 */
                inline eProsima_user_DllExport void severity(double _severity)
                {
                    m_severity = _severity;
                }

                /*!
                 * @brief This function returns the value of member severity
                 * @return Value of member severity
                 */
                inline eProsima_user_DllExport double severity() const
                {
                    return m_severity;
                }

                /*!
                 * @brief This function returns a reference to member severity
                 * @return Reference to member severity
                 */
                inline eProsima_user_DllExport double& severity()
                {
                    return m_severity;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::Sepsis::Data& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                AMM::Physiology::TissueCompartment m_location;
                double m_severity;
            };
        }
        /*!
         * @brief This class represents the structure Modification defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Modification
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Modification();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Modification();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::Modification that will be copied.
             */
            eProsima_user_DllExport Modification(const Modification &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::Modification that will be copied.
             */
            eProsima_user_DllExport Modification(Modification &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::Modification that will be copied.
             */
            eProsima_user_DllExport Modification& operator=(const Modification &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::Modification that will be copied.
             */
            eProsima_user_DllExport Modification& operator=(Modification &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const UUID &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(UUID &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const UUID& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport UUID& id()
            {
                return m_id;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member practitioner
             * @param _practitioner New value to be copied in member practitioner
             */
            inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
            {
                m_practitioner = _practitioner;
            }

            /*!
             * @brief This function moves the value in member practitioner
             * @param _practitioner New value to be moved in member practitioner
             */
            inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
            {
                m_practitioner = std::move(_practitioner);
            }

            /*!
             * @brief This function returns a constant reference to member practitioner
             * @return Constant reference to member practitioner
             */
            inline eProsima_user_DllExport const std::string& practitioner() const
            {
                return m_practitioner;
            }

            /*!
             * @brief This function returns a reference to member practitioner
             * @return Reference to member practitioner
             */
            inline eProsima_user_DllExport std::string& practitioner()
            {
                return m_practitioner;
            }
            /*!
             * @brief This function copies the value in member type
             * @param _type New value to be copied in member type
             */
            inline eProsima_user_DllExport void type(const std::string &_type)
            {
                m_type = _type;
            }

            /*!
             * @brief This function moves the value in member type
             * @param _type New value to be moved in member type
             */
            inline eProsima_user_DllExport void type(std::string &&_type)
            {
                m_type = std::move(_type);
            }

            /*!
             * @brief This function returns a constant reference to member type
             * @return Constant reference to member type
             */
            inline eProsima_user_DllExport const std::string& type() const
            {
                return m_type;
            }

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            inline eProsima_user_DllExport std::string& type()
            {
                return m_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::string &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::string &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::string& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::string& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::Modification& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            UUID m_id;
            FMA_Location m_location;
            std::string m_practitioner;
            std::string m_type;
            std::string m_payload;
        };
        /*!
         * @brief This class represents the structure Node defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Node
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Node();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Node();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node(const Node &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node(Node &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node& operator=(const Node &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node& operator=(Node &&x);

            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function copies the value in member nodepath
             * @param _nodepath New value to be copied in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(const std::string &_nodepath)
            {
                m_nodepath = _nodepath;
            }

            /*!
             * @brief This function moves the value in member nodepath
             * @param _nodepath New value to be moved in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(std::string &&_nodepath)
            {
                m_nodepath = std::move(_nodepath);
            }

            /*!
             * @brief This function returns a constant reference to member nodepath
             * @return Constant reference to member nodepath
             */
            inline eProsima_user_DllExport const std::string& nodepath() const
            {
                return m_nodepath;
            }

            /*!
             * @brief This function returns a reference to member nodepath
             * @return Reference to member nodepath
             */
            inline eProsima_user_DllExport std::string& nodepath()
            {
                return m_nodepath;
            }
            /*!
             * @brief This function copies the value in member unit
             * @param _unit New value to be copied in member unit
             */
            inline eProsima_user_DllExport void unit(const std::string &_unit)
            {
                m_unit = _unit;
            }

            /*!
             * @brief This function moves the value in member unit
             * @param _unit New value to be moved in member unit
             */
            inline eProsima_user_DllExport void unit(std::string &&_unit)
            {
                m_unit = std::move(_unit);
            }

            /*!
             * @brief This function returns a constant reference to member unit
             * @return Constant reference to member unit
             */
            inline eProsima_user_DllExport const std::string& unit() const
            {
                return m_unit;
            }

            /*!
             * @brief This function returns a reference to member unit
             * @return Reference to member unit
             */
            inline eProsima_user_DllExport std::string& unit()
            {
                return m_unit;
            }
            /*!
             * @brief This function sets a value in member dbl
             * @param _dbl New value for member dbl
             */
            inline eProsima_user_DllExport void dbl(double _dbl)
            {
                m_dbl = _dbl;
            }

            /*!
             * @brief This function returns the value of member dbl
             * @return Value of member dbl
             */
            inline eProsima_user_DllExport double dbl() const
            {
                return m_dbl;
            }

            /*!
             * @brief This function returns a reference to member dbl
             * @return Reference to member dbl
             */
            inline eProsima_user_DllExport double& dbl()
            {
                return m_dbl;
            }
            /*!
             * @brief This function copies the value in member str
             * @param _str New value to be copied in member str
             */
            inline eProsima_user_DllExport void str(const std::string &_str)
            {
                m_str = _str;
            }

            /*!
             * @brief This function moves the value in member str
             * @param _str New value to be moved in member str
             */
            inline eProsima_user_DllExport void str(std::string &&_str)
            {
                m_str = std::move(_str);
            }

            /*!
             * @brief This function returns a constant reference to member str
             * @return Constant reference to member str
             */
            inline eProsima_user_DllExport const std::string& str() const
            {
                return m_str;
            }

            /*!
             * @brief This function returns a reference to member str
             * @return Reference to member str
             */
            inline eProsima_user_DllExport std::string& str()
            {
                return m_str;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::Node& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            int64_t m_frame;
            std::string m_nodepath;
            std::string m_unit;
            double m_dbl;
            std::string m_str;
        };
        /*!
         * @brief This class represents the structure HighFrequencyNode defined by the user in the IDL file.
         * @ingroup AMM
         */
        class HighFrequencyNode
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HighFrequencyNode();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HighFrequencyNode();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode(const HighFrequencyNode &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode(HighFrequencyNode &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode& operator=(const HighFrequencyNode &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode& operator=(HighFrequencyNode &&x);

            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function copies the value in member nodepath
             * @param _nodepath New value to be copied in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(const std::string &_nodepath)
            {
                m_nodepath = _nodepath;
            }

            /*!
             * @brief This function moves the value in member nodepath
             * @param _nodepath New value to be moved in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(std::string &&_nodepath)
            {
                m_nodepath = std::move(_nodepath);
            }

            /*!
             * @brief This function returns a constant reference to member nodepath
             * @return Constant reference to member nodepath
             */
            inline eProsima_user_DllExport const std::string& nodepath() const
            {
                return m_nodepath;
            }

            /*!
             * @brief This function returns a reference to member nodepath
             * @return Reference to member nodepath
             */
            inline eProsima_user_DllExport std::string& nodepath()
            {
                return m_nodepath;
            }
            /*!
             * @brief This function copies the value in member unit
             * @param _unit New value to be copied in member unit
             */
            inline eProsima_user_DllExport void unit(const std::string &_unit)
            {
                m_unit = _unit;
            }

            /*!
             * @brief This function moves the value in member unit
             * @param _unit New value to be moved in member unit
             */
            inline eProsima_user_DllExport void unit(std::string &&_unit)
            {
                m_unit = std::move(_unit);
            }

            /*!
             * @brief This function returns a constant reference to member unit
             * @return Constant reference to member unit
             */
            inline eProsima_user_DllExport const std::string& unit() const
            {
                return m_unit;
            }

            /*!
             * @brief This function returns a reference to member unit
             * @return Reference to member unit
             */
            inline eProsima_user_DllExport std::string& unit()
            {
                return m_unit;
            }
            /*!
             * @brief This function sets a value in member dbl
             * @param _dbl New value for member dbl
             */
            inline eProsima_user_DllExport void dbl(double _dbl)
            {
                m_dbl = _dbl;
            }

            /*!
             * @brief This function returns the value of member dbl
             * @return Value of member dbl
             */
            inline eProsima_user_DllExport double dbl() const
            {
                return m_dbl;
            }

            /*!
             * @brief This function returns a reference to member dbl
             * @return Reference to member dbl
             */
            inline eProsima_user_DllExport double& dbl()
            {
                return m_dbl;
            }
            /*!
             * @brief This function copies the value in member str
             * @param _str New value to be copied in member str
             */
            inline eProsima_user_DllExport void str(const std::string &_str)
            {
                m_str = _str;
            }

            /*!
             * @brief This function moves the value in member str
             * @param _str New value to be moved in member str
             */
            inline eProsima_user_DllExport void str(std::string &&_str)
            {
                m_str = std::move(_str);
            }

            /*!
             * @brief This function returns a constant reference to member str
             * @return Constant reference to member str
             */
            inline eProsima_user_DllExport const std::string& str() const
            {
                return m_str;
            }

            /*!
             * @brief This function returns a reference to member str
             * @return Reference to member str
             */
            inline eProsima_user_DllExport std::string& str()
            {
                return m_str;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::HighFrequencyNode& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            int64_t m_frame;
            std::string m_nodepath;
            std::string m_unit;
            double m_dbl;
            std::string m_str;
        };
    }
    namespace Render
    {
        /*!
         * @brief This class represents the structure Modification defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Modification
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Modification();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Modification();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Render::Modification that will be copied.
             */
            eProsima_user_DllExport Modification(const Modification &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Render::Modification that will be copied.
             */
            eProsima_user_DllExport Modification(Modification &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Render::Modification that will be copied.
             */
            eProsima_user_DllExport Modification& operator=(const Modification &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Render::Modification that will be copied.
             */
            eProsima_user_DllExport Modification& operator=(Modification &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const UUID &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(UUID &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const UUID& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport UUID& id()
            {
                return m_id;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member practitioner
             * @param _practitioner New value to be copied in member practitioner
             */
            inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
            {
                m_practitioner = _practitioner;
            }

            /*!
             * @brief This function moves the value in member practitioner
             * @param _practitioner New value to be moved in member practitioner
             */
            inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
            {
                m_practitioner = std::move(_practitioner);
            }

            /*!
             * @brief This function returns a constant reference to member practitioner
             * @return Constant reference to member practitioner
             */
            inline eProsima_user_DllExport const std::string& practitioner() const
            {
                return m_practitioner;
            }

            /*!
             * @brief This function returns a reference to member practitioner
             * @return Reference to member practitioner
             */
            inline eProsima_user_DllExport std::string& practitioner()
            {
                return m_practitioner;
            }
            /*!
             * @brief This function copies the value in member type
             * @param _type New value to be copied in member type
             */
            inline eProsima_user_DllExport void type(const std::string &_type)
            {
                m_type = _type;
            }

            /*!
             * @brief This function moves the value in member type
             * @param _type New value to be moved in member type
             */
            inline eProsima_user_DllExport void type(std::string &&_type)
            {
                m_type = std::move(_type);
            }

            /*!
             * @brief This function returns a constant reference to member type
             * @return Constant reference to member type
             */
            inline eProsima_user_DllExport const std::string& type() const
            {
                return m_type;
            }

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            inline eProsima_user_DllExport std::string& type()
            {
                return m_type;
            }
            /*!
             * @brief This function copies the value in member payload
             * @param _payload New value to be copied in member payload
             */
            inline eProsima_user_DllExport void payload(const std::string &_payload)
            {
                m_payload = _payload;
            }

            /*!
             * @brief This function moves the value in member payload
             * @param _payload New value to be moved in member payload
             */
            inline eProsima_user_DllExport void payload(std::string &&_payload)
            {
                m_payload = std::move(_payload);
            }

            /*!
             * @brief This function returns a constant reference to member payload
             * @return Constant reference to member payload
             */
            inline eProsima_user_DllExport const std::string& payload() const
            {
                return m_payload;
            }

            /*!
             * @brief This function returns a reference to member payload
             * @return Reference to member payload
             */
            inline eProsima_user_DllExport std::string& payload()
            {
                return m_payload;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Render::Modification& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            UUID m_id;
            FMA_Location m_location;
            std::string m_practitioner;
            std::string m_type;
            std::string m_payload;
        };
    }
    namespace PatientAction
    {
        namespace BioGears
        {
            /*!
             * @brief This class represents the structure Command defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Command
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Command();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Command();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command(const Command &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command(Command &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command& operator=(const Command &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command& operator=(Command &&x);

                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::PatientAction::BioGears::Command& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                std::string m_message;
            };
        }
    }
    namespace Performance
    {
        /*!
         * @brief This class represents the structure xAPIModifier defined by the user in the IDL file.
         * @ingroup AMM
         */
        class xAPIModifier
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport xAPIModifier();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~xAPIModifier();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier(const xAPIModifier &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier(xAPIModifier &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier& operator=(const xAPIModifier &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier& operator=(xAPIModifier &&x);

            /*!
             * @brief This function copies the value in member key
             * @param _key New value to be copied in member key
             */
            inline eProsima_user_DllExport void key(const std::string &_key)
            {
                m_key = _key;
            }

            /*!
             * @brief This function moves the value in member key
             * @param _key New value to be moved in member key
             */
            inline eProsima_user_DllExport void key(std::string &&_key)
            {
                m_key = std::move(_key);
            }

            /*!
             * @brief This function returns a constant reference to member key
             * @return Constant reference to member key
             */
            inline eProsima_user_DllExport const std::string& key() const
            {
                return m_key;
            }

            /*!
             * @brief This function returns a reference to member key
             * @return Reference to member key
             */
            inline eProsima_user_DllExport std::string& key()
            {
                return m_key;
            }
            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            inline eProsima_user_DllExport void value(const std::string &_value)
            {
                m_value = _value;
            }

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            inline eProsima_user_DllExport void value(std::string &&_value)
            {
                m_value = std::move(_value);
            }

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            inline eProsima_user_DllExport const std::string& value() const
            {
                return m_value;
            }

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            inline eProsima_user_DllExport std::string& value()
            {
                return m_value;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Performance::xAPIModifier& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_key;
            std::string m_value;
        };
        typedef std::vector<AMM::Performance::xAPIModifier> xAPI_Modifiers;
        /*!
         * @brief This class represents the structure Statement defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Statement
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Statement();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Statement();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement(const Statement &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement(Statement &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement& operator=(const Statement &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement& operator=(Statement &&x);

            /*!
             * @brief This function copies the value in member noun
             * @param _noun New value to be copied in member noun
             */
            inline eProsima_user_DllExport void noun(const std::string &_noun)
            {
                m_noun = _noun;
            }

            /*!
             * @brief This function moves the value in member noun
             * @param _noun New value to be moved in member noun
             */
            inline eProsima_user_DllExport void noun(std::string &&_noun)
            {
                m_noun = std::move(_noun);
            }

            /*!
             * @brief This function returns a constant reference to member noun
             * @return Constant reference to member noun
             */
            inline eProsima_user_DllExport const std::string& noun() const
            {
                return m_noun;
            }

            /*!
             * @brief This function returns a reference to member noun
             * @return Reference to member noun
             */
            inline eProsima_user_DllExport std::string& noun()
            {
                return m_noun;
            }
            /*!
             * @brief This function copies the value in member noun_modifiers
             * @param _noun_modifiers New value to be copied in member noun_modifiers
             */
            inline eProsima_user_DllExport void noun_modifiers(const AMM::Performance::xAPI_Modifiers &_noun_modifiers)
            {
                m_noun_modifiers = _noun_modifiers;
            }

            /*!
             * @brief This function moves the value in member noun_modifiers
             * @param _noun_modifiers New value to be moved in member noun_modifiers
             */
            inline eProsima_user_DllExport void noun_modifiers(AMM::Performance::xAPI_Modifiers &&_noun_modifiers)
            {
                m_noun_modifiers = std::move(_noun_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member noun_modifiers
             * @return Constant reference to member noun_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& noun_modifiers() const
            {
                return m_noun_modifiers;
            }

            /*!
             * @brief This function returns a reference to member noun_modifiers
             * @return Reference to member noun_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& noun_modifiers()
            {
                return m_noun_modifiers;
            }
            /*!
             * @brief This function copies the value in member verb
             * @param _verb New value to be copied in member verb
             */
            inline eProsima_user_DllExport void verb(const std::string &_verb)
            {
                m_verb = _verb;
            }

            /*!
             * @brief This function moves the value in member verb
             * @param _verb New value to be moved in member verb
             */
            inline eProsima_user_DllExport void verb(std::string &&_verb)
            {
                m_verb = std::move(_verb);
            }

            /*!
             * @brief This function returns a constant reference to member verb
             * @return Constant reference to member verb
             */
            inline eProsima_user_DllExport const std::string& verb() const
            {
                return m_verb;
            }

            /*!
             * @brief This function returns a reference to member verb
             * @return Reference to member verb
             */
            inline eProsima_user_DllExport std::string& verb()
            {
                return m_verb;
            }
            /*!
             * @brief This function copies the value in member verb_modifiers
             * @param _verb_modifiers New value to be copied in member verb_modifiers
             */
            inline eProsima_user_DllExport void verb_modifiers(const AMM::Performance::xAPI_Modifiers &_verb_modifiers)
            {
                m_verb_modifiers = _verb_modifiers;
            }

            /*!
             * @brief This function moves the value in member verb_modifiers
             * @param _verb_modifiers New value to be moved in member verb_modifiers
             */
            inline eProsima_user_DllExport void verb_modifiers(AMM::Performance::xAPI_Modifiers &&_verb_modifiers)
            {
                m_verb_modifiers = std::move(_verb_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member verb_modifiers
             * @return Constant reference to member verb_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& verb_modifiers() const
            {
                return m_verb_modifiers;
            }

            /*!
             * @brief This function returns a reference to member verb_modifiers
             * @return Reference to member verb_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& verb_modifiers()
            {
                return m_verb_modifiers;
            }
            /*!
             * @brief This function copies the value in member obj
             * @param _obj New value to be copied in member obj
             */
            inline eProsima_user_DllExport void obj(const std::string &_obj)
            {
                m_obj = _obj;
            }

            /*!
             * @brief This function moves the value in member obj
             * @param _obj New value to be moved in member obj
             */
            inline eProsima_user_DllExport void obj(std::string &&_obj)
            {
                m_obj = std::move(_obj);
            }

            /*!
             * @brief This function returns a constant reference to member obj
             * @return Constant reference to member obj
             */
            inline eProsima_user_DllExport const std::string& obj() const
            {
                return m_obj;
            }

            /*!
             * @brief This function returns a reference to member obj
             * @return Reference to member obj
             */
            inline eProsima_user_DllExport std::string& obj()
            {
                return m_obj;
            }
            /*!
             * @brief This function copies the value in member obj_modifiers
             * @param _obj_modifiers New value to be copied in member obj_modifiers
             */
            inline eProsima_user_DllExport void obj_modifiers(const AMM::Performance::xAPI_Modifiers &_obj_modifiers)
            {
                m_obj_modifiers = _obj_modifiers;
            }

            /*!
             * @brief This function moves the value in member obj_modifiers
             * @param _obj_modifiers New value to be moved in member obj_modifiers
             */
            inline eProsima_user_DllExport void obj_modifiers(AMM::Performance::xAPI_Modifiers &&_obj_modifiers)
            {
                m_obj_modifiers = std::move(_obj_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member obj_modifiers
             * @return Constant reference to member obj_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& obj_modifiers() const
            {
                return m_obj_modifiers;
            }

            /*!
             * @brief This function returns a reference to member obj_modifiers
             * @return Reference to member obj_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& obj_modifiers()
            {
                return m_obj_modifiers;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Performance::Statement& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_noun;
            AMM::Performance::xAPI_Modifiers m_noun_modifiers;
            std::string m_verb;
            AMM::Performance::xAPI_Modifiers m_verb_modifiers;
            std::string m_obj;
            AMM::Performance::xAPI_Modifiers m_obj_modifiers;
        };
        /*!
         * @brief This class represents the structure Assessment defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Assessment
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Assessment();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Assessment();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Performance::Assessment that will be copied.
             */
            eProsima_user_DllExport Assessment(const Assessment &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Performance::Assessment that will be copied.
             */
            eProsima_user_DllExport Assessment(Assessment &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Performance::Assessment that will be copied.
             */
            eProsima_user_DllExport Assessment& operator=(const Assessment &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Performance::Assessment that will be copied.
             */
            eProsima_user_DllExport Assessment& operator=(Assessment &&x);

            /*!
             * @brief This function copies the value in member Timestamp
             * @param _Timestamp New value to be copied in member Timestamp
             */
            inline eProsima_user_DllExport void Timestamp(const std::string &_Timestamp)
            {
                m_Timestamp = _Timestamp;
            }

            /*!
             * @brief This function moves the value in member Timestamp
             * @param _Timestamp New value to be moved in member Timestamp
             */
            inline eProsima_user_DllExport void Timestamp(std::string &&_Timestamp)
            {
                m_Timestamp = std::move(_Timestamp);
            }

            /*!
             * @brief This function returns a constant reference to member Timestamp
             * @return Constant reference to member Timestamp
             */
            inline eProsima_user_DllExport const std::string& Timestamp() const
            {
                return m_Timestamp;
            }

            /*!
             * @brief This function returns a reference to member Timestamp
             * @return Reference to member Timestamp
             */
            inline eProsima_user_DllExport std::string& Timestamp()
            {
                return m_Timestamp;
            }
            /*!
             * @brief This function copies the value in member learner_id
             * @param _learner_id New value to be copied in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(const std::string &_learner_id)
            {
                m_learner_id = _learner_id;
            }

            /*!
             * @brief This function moves the value in member learner_id
             * @param _learner_id New value to be moved in member learner_id
             */
            inline eProsima_user_DllExport void learner_id(std::string &&_learner_id)
            {
                m_learner_id = std::move(_learner_id);
            }

            /*!
             * @brief This function returns a constant reference to member learner_id
             * @return Constant reference to member learner_id
             */
            inline eProsima_user_DllExport const std::string& learner_id() const
            {
                return m_learner_id;
            }

            /*!
             * @brief This function returns a reference to member learner_id
             * @return Reference to member learner_id
             */
            inline eProsima_user_DllExport std::string& learner_id()
            {
                return m_learner_id;
            }
            /*!
             * @brief This function copies the value in member location
             * @param _location New value to be copied in member location
             */
            inline eProsima_user_DllExport void location(const FMA_Location &_location)
            {
                m_location = _location;
            }

            /*!
             * @brief This function moves the value in member location
             * @param _location New value to be moved in member location
             */
            inline eProsima_user_DllExport void location(FMA_Location &&_location)
            {
                m_location = std::move(_location);
            }

            /*!
             * @brief This function returns a constant reference to member location
             * @return Constant reference to member location
             */
            inline eProsima_user_DllExport const FMA_Location& location() const
            {
                return m_location;
            }

            /*!
             * @brief This function returns a reference to member location
             * @return Reference to member location
             */
            inline eProsima_user_DllExport FMA_Location& location()
            {
                return m_location;
            }
            /*!
             * @brief This function copies the value in member assessment_type
             * @param _assessment_type New value to be copied in member assessment_type
             */
            inline eProsima_user_DllExport void assessment_type(const std::string &_assessment_type)
            {
                m_assessment_type = _assessment_type;
            }

            /*!
             * @brief This function moves the value in member assessment_type
             * @param _assessment_type New value to be moved in member assessment_type
             */
            inline eProsima_user_DllExport void assessment_type(std::string &&_assessment_type)
            {
                m_assessment_type = std::move(_assessment_type);
            }

            /*!
             * @brief This function returns a constant reference to member assessment_type
             * @return Constant reference to member assessment_type
             */
            inline eProsima_user_DllExport const std::string& assessment_type() const
            {
                return m_assessment_type;
            }

            /*!
             * @brief This function returns a reference to member assessment_type
             * @return Reference to member assessment_type
             */
            inline eProsima_user_DllExport std::string& assessment_type()
            {
                return m_assessment_type;
            }
            /*!
             * @brief This function copies the value in member assessment_info
             * @param _assessment_info New value to be copied in member assessment_info
             */
            inline eProsima_user_DllExport void assessment_info(const std::string &_assessment_info)
            {
                m_assessment_info = _assessment_info;
            }

            /*!
             * @brief This function moves the value in member assessment_info
             * @param _assessment_info New value to be moved in member assessment_info
             */
            inline eProsima_user_DllExport void assessment_info(std::string &&_assessment_info)
            {
                m_assessment_info = std::move(_assessment_info);
            }

            /*!
             * @brief This function returns a constant reference to member assessment_info
             * @return Constant reference to member assessment_info
             */
            inline eProsima_user_DllExport const std::string& assessment_info() const
            {
                return m_assessment_info;
            }

            /*!
             * @brief This function returns a reference to member assessment_info
             * @return Reference to member assessment_info
             */
            inline eProsima_user_DllExport std::string& assessment_info()
            {
                return m_assessment_info;
            }
            /*!
             * @brief This function copies the value in member step
             * @param _step New value to be copied in member step
             */
            inline eProsima_user_DllExport void step(const std::string &_step)
            {
                m_step = _step;
            }

            /*!
             * @brief This function moves the value in member step
             * @param _step New value to be moved in member step
             */
            inline eProsima_user_DllExport void step(std::string &&_step)
            {
                m_step = std::move(_step);
            }

            /*!
             * @brief This function returns a constant reference to member step
             * @return Constant reference to member step
             */
            inline eProsima_user_DllExport const std::string& step() const
            {
                return m_step;
            }

            /*!
             * @brief This function returns a reference to member step
             * @return Reference to member step
             */
            inline eProsima_user_DllExport std::string& step()
            {
                return m_step;
            }
            /*!
             * @brief This function copies the value in member comment
             * @param _comment New value to be copied in member comment
             */
            inline eProsima_user_DllExport void comment(const std::string &_comment)
            {
                m_comment = _comment;
            }

            /*!
             * @brief This function moves the value in member comment
             * @param _comment New value to be moved in member comment
             */
            inline eProsima_user_DllExport void comment(std::string &&_comment)
            {
                m_comment = std::move(_comment);
            }

            /*!
             * @brief This function returns a constant reference to member comment
             * @return Constant reference to member comment
             */
            inline eProsima_user_DllExport const std::string& comment() const
            {
                return m_comment;
            }

            /*!
             * @brief This function returns a reference to member comment
             * @return Reference to member comment
             */
            inline eProsima_user_DllExport std::string& comment()
            {
                return m_comment;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Performance::Assessment& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_Timestamp;
            std::string m_learner_id;
            FMA_Location m_location;
            std::string m_assessment_type;
            std::string m_assessment_info;
            std::string m_step;
            std::string m_comment;
        };
    }
    namespace Resource
    {
        namespace Requirement
        {
            /*!
             * @brief This class represents the structure Power defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Power
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Power();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Power();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Power that will be copied.
                 */
                eProsima_user_DllExport Power(const Power &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Power that will be copied.
                 */
                eProsima_user_DllExport Power(Power &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Power that will be copied.
                 */
                eProsima_user_DllExport Power& operator=(const Power &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Power that will be copied.
                 */
                eProsima_user_DllExport Power& operator=(Power &&x);

                /*!
                 * @brief This function sets a value in member volts
                 * @param _volts New value for member volts
                 */
                inline eProsima_user_DllExport void volts(double _volts)
                {
                    m_volts = _volts;
                }

                /*!
                 * @brief This function returns the value of member volts
                 * @return Value of member volts
                 */
                inline eProsima_user_DllExport double volts() const
                {
                    return m_volts;
                }

                /*!
                 * @brief This function returns a reference to member volts
                 * @return Reference to member volts
                 */
                inline eProsima_user_DllExport double& volts()
                {
                    return m_volts;
                }
                /*!
                 * @brief This function sets a value in member amps
                 * @param _amps New value for member amps
                 */
                inline eProsima_user_DllExport void amps(double _amps)
                {
                    m_amps = _amps;
                }

                /*!
                 * @brief This function returns the value of member amps
                 * @return Value of member amps
                 */
                inline eProsima_user_DllExport double amps() const
                {
                    return m_amps;
                }

                /*!
                 * @brief This function returns a reference to member amps
                 * @return Reference to member amps
                 */
                inline eProsima_user_DllExport double& amps()
                {
                    return m_amps;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Requirement::Power& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volts;
                double m_amps;
            };
            /*!
             * @brief This class represents the structure Blood defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Blood
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Blood();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Blood();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood(const Blood &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood(Blood &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood& operator=(const Blood &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood& operator=(Blood &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Requirement::Blood& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Clear_Liquid defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Clear_Liquid
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Clear_Liquid();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Clear_Liquid();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid(const Clear_Liquid &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid(Clear_Liquid &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid& operator=(const Clear_Liquid &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid& operator=(Clear_Liquid &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Requirement::Clear_Liquid& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Air defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Air
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Air();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Air();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Air that will be copied.
                 */
                eProsima_user_DllExport Air(const Air &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Air that will be copied.
                 */
                eProsima_user_DllExport Air(Air &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Air that will be copied.
                 */
                eProsima_user_DllExport Air& operator=(const Air &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Air that will be copied.
                 */
                eProsima_user_DllExport Air& operator=(Air &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Requirement::Air& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Cleaning_Solution defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Cleaning_Solution
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Cleaning_Solution();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Cleaning_Solution();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution(const Cleaning_Solution &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Requirement::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution(Cleaning_Solution &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution& operator=(const Cleaning_Solution &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Requirement::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution& operator=(Cleaning_Solution &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Requirement::Cleaning_Solution& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
        }
        namespace Supply
        {
            /*!
             * @brief This class represents the structure Power defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Power
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Power();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Power();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Power that will be copied.
                 */
                eProsima_user_DllExport Power(const Power &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Power that will be copied.
                 */
                eProsima_user_DllExport Power(Power &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Power that will be copied.
                 */
                eProsima_user_DllExport Power& operator=(const Power &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Power that will be copied.
                 */
                eProsima_user_DllExport Power& operator=(Power &&x);

                /*!
                 * @brief This function sets a value in member volts
                 * @param _volts New value for member volts
                 */
                inline eProsima_user_DllExport void volts(double _volts)
                {
                    m_volts = _volts;
                }

                /*!
                 * @brief This function returns the value of member volts
                 * @return Value of member volts
                 */
                inline eProsima_user_DllExport double volts() const
                {
                    return m_volts;
                }

                /*!
                 * @brief This function returns a reference to member volts
                 * @return Reference to member volts
                 */
                inline eProsima_user_DllExport double& volts()
                {
                    return m_volts;
                }
                /*!
                 * @brief This function sets a value in member amps
                 * @param _amps New value for member amps
                 */
                inline eProsima_user_DllExport void amps(double _amps)
                {
                    m_amps = _amps;
                }

                /*!
                 * @brief This function returns the value of member amps
                 * @return Value of member amps
                 */
                inline eProsima_user_DllExport double amps() const
                {
                    return m_amps;
                }

                /*!
                 * @brief This function returns a reference to member amps
                 * @return Reference to member amps
                 */
                inline eProsima_user_DllExport double& amps()
                {
                    return m_amps;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Supply::Power& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volts;
                double m_amps;
            };
            /*!
             * @brief This class represents the structure Blood defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Blood
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Blood();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Blood();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood(const Blood &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood(Blood &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood& operator=(const Blood &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Blood that will be copied.
                 */
                eProsima_user_DllExport Blood& operator=(Blood &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Supply::Blood& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Clear_Liquid defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Clear_Liquid
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Clear_Liquid();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Clear_Liquid();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid(const Clear_Liquid &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid(Clear_Liquid &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid& operator=(const Clear_Liquid &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Clear_Liquid that will be copied.
                 */
                eProsima_user_DllExport Clear_Liquid& operator=(Clear_Liquid &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Supply::Clear_Liquid& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Air defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Air
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Air();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Air();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Air that will be copied.
                 */
                eProsima_user_DllExport Air(const Air &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Air that will be copied.
                 */
                eProsima_user_DllExport Air(Air &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Air that will be copied.
                 */
                eProsima_user_DllExport Air& operator=(const Air &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Air that will be copied.
                 */
                eProsima_user_DllExport Air& operator=(Air &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Supply::Air& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
            /*!
             * @brief This class represents the structure Cleaning_Solution defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Cleaning_Solution
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Cleaning_Solution();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Cleaning_Solution();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution(const Cleaning_Solution &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Resource::Supply::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution(Cleaning_Solution &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution& operator=(const Cleaning_Solution &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Resource::Supply::Cleaning_Solution that will be copied.
                 */
                eProsima_user_DllExport Cleaning_Solution& operator=(Cleaning_Solution &&x);

                /*!
                 * @brief This function sets a value in member volume
                 * @param _volume New value for member volume
                 */
                inline eProsima_user_DllExport void volume(double _volume)
                {
                    m_volume = _volume;
                }

                /*!
                 * @brief This function returns the value of member volume
                 * @return Value of member volume
                 */
                inline eProsima_user_DllExport double volume() const
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns a reference to member volume
                 * @return Reference to member volume
                 */
                inline eProsima_user_DllExport double& volume()
                {
                    return m_volume;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Resource::Supply::Cleaning_Solution& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                double m_volume;
            };
        }
    }
    namespace Capability
    {
        /*!
         * @brief This class represents the enumeration status_values defined by the user in the IDL file.
         * @ingroup AMM
         */
        enum status_values : uint32_t
        {
            OPERATIONAL,
            HALTING_ERROR,
            IMPENDING_ERROR
        };
        /*!
         * @brief This class represents the structure AMM_version defined by the user in the IDL file.
         * @ingroup AMM
         */
        class AMM_version
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport AMM_version();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~AMM_version();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Capability::AMM_version that will be copied.
             */
            eProsima_user_DllExport AMM_version(const AMM_version &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Capability::AMM_version that will be copied.
             */
            eProsima_user_DllExport AMM_version(AMM_version &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Capability::AMM_version that will be copied.
             */
            eProsima_user_DllExport AMM_version& operator=(const AMM_version &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Capability::AMM_version that will be copied.
             */
            eProsima_user_DllExport AMM_version& operator=(AMM_version &&x);

            /*!
             * @brief This function copies the value in member software_version
             * @param _software_version New value to be copied in member software_version
             */
            inline eProsima_user_DllExport void software_version(const std::string &_software_version)
            {
                m_software_version = _software_version;
            }

            /*!
             * @brief This function moves the value in member software_version
             * @param _software_version New value to be moved in member software_version
             */
            inline eProsima_user_DllExport void software_version(std::string &&_software_version)
            {
                m_software_version = std::move(_software_version);
            }

            /*!
             * @brief This function returns a constant reference to member software_version
             * @return Constant reference to member software_version
             */
            inline eProsima_user_DllExport const std::string& software_version() const
            {
                return m_software_version;
            }

            /*!
             * @brief This function returns a reference to member software_version
             * @return Reference to member software_version
             */
            inline eProsima_user_DllExport std::string& software_version()
            {
                return m_software_version;
            }
            /*!
             * @brief This function copies the value in member hardware_version
             * @param _hardware_version New value to be copied in member hardware_version
             */
            inline eProsima_user_DllExport void hardware_version(const std::string &_hardware_version)
            {
                m_hardware_version = _hardware_version;
            }

            /*!
             * @brief This function moves the value in member hardware_version
             * @param _hardware_version New value to be moved in member hardware_version
             */
            inline eProsima_user_DllExport void hardware_version(std::string &&_hardware_version)
            {
                m_hardware_version = std::move(_hardware_version);
            }

            /*!
             * @brief This function returns a constant reference to member hardware_version
             * @return Constant reference to member hardware_version
             */
            inline eProsima_user_DllExport const std::string& hardware_version() const
            {
                return m_hardware_version;
            }

            /*!
             * @brief This function returns a reference to member hardware_version
             * @return Reference to member hardware_version
             */
            inline eProsima_user_DllExport std::string& hardware_version()
            {
                return m_hardware_version;
            }
            /*!
             * @brief This function copies the value in member specification_version
             * @param _specification_version New value to be copied in member specification_version
             */
            inline eProsima_user_DllExport void specification_version(const std::string &_specification_version)
            {
                m_specification_version = _specification_version;
            }

            /*!
             * @brief This function moves the value in member specification_version
             * @param _specification_version New value to be moved in member specification_version
             */
            inline eProsima_user_DllExport void specification_version(std::string &&_specification_version)
            {
                m_specification_version = std::move(_specification_version);
            }

            /*!
             * @brief This function returns a constant reference to member specification_version
             * @return Constant reference to member specification_version
             */
            inline eProsima_user_DllExport const std::string& specification_version() const
            {
                return m_specification_version;
            }

            /*!
             * @brief This function returns a reference to member specification_version
             * @return Reference to member specification_version
             */
            inline eProsima_user_DllExport std::string& specification_version()
            {
                return m_specification_version;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Capability::AMM_version& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_software_version;
            std::string m_hardware_version;
            std::string m_specification_version;
        };
        /*!
         * @brief This class represents the structure Configuration defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Configuration
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Configuration();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Configuration();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Capability::Configuration that will be copied.
             */
            eProsima_user_DllExport Configuration(const Configuration &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Capability::Configuration that will be copied.
             */
            eProsima_user_DllExport Configuration(Configuration &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Capability::Configuration that will be copied.
             */
            eProsima_user_DllExport Configuration& operator=(const Configuration &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Capability::Configuration that will be copied.
             */
            eProsima_user_DllExport Configuration& operator=(Configuration &&x);

            /*!
             * @brief This function copies the value in member module_id
             * @param _module_id New value to be copied in member module_id
             */
            inline eProsima_user_DllExport void module_id(const std::string &_module_id)
            {
                m_module_id = _module_id;
            }

            /*!
             * @brief This function moves the value in member module_id
             * @param _module_id New value to be moved in member module_id
             */
            inline eProsima_user_DllExport void module_id(std::string &&_module_id)
            {
                m_module_id = std::move(_module_id);
            }

            /*!
             * @brief This function returns a constant reference to member module_id
             * @return Constant reference to member module_id
             */
            inline eProsima_user_DllExport const std::string& module_id() const
            {
                return m_module_id;
            }

            /*!
             * @brief This function returns a reference to member module_id
             * @return Reference to member module_id
             */
            inline eProsima_user_DllExport std::string& module_id()
            {
                return m_module_id;
            }
            /*!
             * @brief This function copies the value in member module_name
             * @param _module_name New value to be copied in member module_name
             */
            inline eProsima_user_DllExport void module_name(const std::string &_module_name)
            {
                m_module_name = _module_name;
            }

            /*!
             * @brief This function moves the value in member module_name
             * @param _module_name New value to be moved in member module_name
             */
            inline eProsima_user_DllExport void module_name(std::string &&_module_name)
            {
                m_module_name = std::move(_module_name);
            }

            /*!
             * @brief This function returns a constant reference to member module_name
             * @return Constant reference to member module_name
             */
            inline eProsima_user_DllExport const std::string& module_name() const
            {
                return m_module_name;
            }

            /*!
             * @brief This function returns a reference to member module_name
             * @return Reference to member module_name
             */
            inline eProsima_user_DllExport std::string& module_name()
            {
                return m_module_name;
            }
            /*!
             * @brief This function copies the value in member manufacturer
             * @param _manufacturer New value to be copied in member manufacturer
             */
            inline eProsima_user_DllExport void manufacturer(const std::string &_manufacturer)
            {
                m_manufacturer = _manufacturer;
            }

            /*!
             * @brief This function moves the value in member manufacturer
             * @param _manufacturer New value to be moved in member manufacturer
             */
            inline eProsima_user_DllExport void manufacturer(std::string &&_manufacturer)
            {
                m_manufacturer = std::move(_manufacturer);
            }

            /*!
             * @brief This function returns a constant reference to member manufacturer
             * @return Constant reference to member manufacturer
             */
            inline eProsima_user_DllExport const std::string& manufacturer() const
            {
                return m_manufacturer;
            }

            /*!
             * @brief This function returns a reference to member manufacturer
             * @return Reference to member manufacturer
             */
            inline eProsima_user_DllExport std::string& manufacturer()
            {
                return m_manufacturer;
            }
            /*!
             * @brief This function copies the value in member model
             * @param _model New value to be copied in member model
             */
            inline eProsima_user_DllExport void model(const std::string &_model)
            {
                m_model = _model;
            }

            /*!
             * @brief This function moves the value in member model
             * @param _model New value to be moved in member model
             */
            inline eProsima_user_DllExport void model(std::string &&_model)
            {
                m_model = std::move(_model);
            }

            /*!
             * @brief This function returns a constant reference to member model
             * @return Constant reference to member model
             */
            inline eProsima_user_DllExport const std::string& model() const
            {
                return m_model;
            }

            /*!
             * @brief This function returns a reference to member model
             * @return Reference to member model
             */
            inline eProsima_user_DllExport std::string& model()
            {
                return m_model;
            }
            /*!
             * @brief This function copies the value in member serial_number
             * @param _serial_number New value to be copied in member serial_number
             */
            inline eProsima_user_DllExport void serial_number(const std::string &_serial_number)
            {
                m_serial_number = _serial_number;
            }

            /*!
             * @brief This function moves the value in member serial_number
             * @param _serial_number New value to be moved in member serial_number
             */
            inline eProsima_user_DllExport void serial_number(std::string &&_serial_number)
            {
                m_serial_number = std::move(_serial_number);
            }

            /*!
             * @brief This function returns a constant reference to member serial_number
             * @return Constant reference to member serial_number
             */
            inline eProsima_user_DllExport const std::string& serial_number() const
            {
                return m_serial_number;
            }

            /*!
             * @brief This function returns a reference to member serial_number
             * @return Reference to member serial_number
             */
            inline eProsima_user_DllExport std::string& serial_number()
            {
                return m_serial_number;
            }
            /*!
             * @brief This function copies the value in member version
             * @param _version New value to be copied in member version
             */
            inline eProsima_user_DllExport void version(const std::string &_version)
            {
                m_version = _version;
            }

            /*!
             * @brief This function moves the value in member version
             * @param _version New value to be moved in member version
             */
            inline eProsima_user_DllExport void version(std::string &&_version)
            {
                m_version = std::move(_version);
            }

            /*!
             * @brief This function returns a constant reference to member version
             * @return Constant reference to member version
             */
            inline eProsima_user_DllExport const std::string& version() const
            {
                return m_version;
            }

            /*!
             * @brief This function returns a reference to member version
             * @return Reference to member version
             */
            inline eProsima_user_DllExport std::string& version()
            {
                return m_version;
            }
            /*!
             * @brief This function copies the value in member amm_version
             * @param _amm_version New value to be copied in member amm_version
             */
            inline eProsima_user_DllExport void amm_version(const AMM::Capability::AMM_version &_amm_version)
            {
                m_amm_version = _amm_version;
            }

            /*!
             * @brief This function moves the value in member amm_version
             * @param _amm_version New value to be moved in member amm_version
             */
            inline eProsima_user_DllExport void amm_version(AMM::Capability::AMM_version &&_amm_version)
            {
                m_amm_version = std::move(_amm_version);
            }

            /*!
             * @brief This function returns a constant reference to member amm_version
             * @return Constant reference to member amm_version
             */
            inline eProsima_user_DllExport const AMM::Capability::AMM_version& amm_version() const
            {
                return m_amm_version;
            }

            /*!
             * @brief This function returns a reference to member amm_version
             * @return Reference to member amm_version
             */
            inline eProsima_user_DllExport AMM::Capability::AMM_version& amm_version()
            {
                return m_amm_version;
            }
            /*!
             * @brief This function copies the value in member capabilities
             * @param _capabilities New value to be copied in member capabilities
             */
            inline eProsima_user_DllExport void capabilities(const std::string &_capabilities)
            {
                m_capabilities = _capabilities;
            }

            /*!
             * @brief This function moves the value in member capabilities
             * @param _capabilities New value to be moved in member capabilities
             */
            inline eProsima_user_DllExport void capabilities(std::string &&_capabilities)
            {
                m_capabilities = std::move(_capabilities);
            }

            /*!
             * @brief This function returns a constant reference to member capabilities
             * @return Constant reference to member capabilities
             */
            inline eProsima_user_DllExport const std::string& capabilities() const
            {
                return m_capabilities;
            }

            /*!
             * @brief This function returns a reference to member capabilities
             * @return Reference to member capabilities
             */
            inline eProsima_user_DllExport std::string& capabilities()
            {
                return m_capabilities;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Capability::Configuration& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_module_id;
            std::string m_module_name;
            std::string m_manufacturer;
            std::string m_model;
            std::string m_serial_number;
            std::string m_version;
            AMM::Capability::AMM_version m_amm_version;
            std::string m_capabilities;
        };
        /*!
         * @brief This class represents the structure Scenario defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Scenario
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Scenario();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Scenario();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Capability::Scenario that will be copied.
             */
            eProsima_user_DllExport Scenario(const Scenario &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Capability::Scenario that will be copied.
             */
            eProsima_user_DllExport Scenario(Scenario &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Capability::Scenario that will be copied.
             */
            eProsima_user_DllExport Scenario& operator=(const Scenario &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Capability::Scenario that will be copied.
             */
            eProsima_user_DllExport Scenario& operator=(Scenario &&x);

            /*!
             * @brief This function copies the value in member id
             * @param _id New value to be copied in member id
             */
            inline eProsima_user_DllExport void id(const std::string &_id)
            {
                m_id = _id;
            }

            /*!
             * @brief This function moves the value in member id
             * @param _id New value to be moved in member id
             */
            inline eProsima_user_DllExport void id(std::string &&_id)
            {
                m_id = std::move(_id);
            }

            /*!
             * @brief This function returns a constant reference to member id
             * @return Constant reference to member id
             */
            inline eProsima_user_DllExport const std::string& id() const
            {
                return m_id;
            }

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            inline eProsima_user_DllExport std::string& id()
            {
                return m_id;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Capability::Scenario& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_id;
        };
        /*!
         * @brief This class represents the structure Status defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Status
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Status();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Status();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Capability::Status that will be copied.
             */
            eProsima_user_DllExport Status(const Status &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Capability::Status that will be copied.
             */
            eProsima_user_DllExport Status(Status &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Capability::Status that will be copied.
             */
            eProsima_user_DllExport Status& operator=(const Status &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Capability::Status that will be copied.
             */
            eProsima_user_DllExport Status& operator=(Status &&x);

            /*!
             * @brief This function copies the value in member module_id
             * @param _module_id New value to be copied in member module_id
             */
            inline eProsima_user_DllExport void module_id(const std::string &_module_id)
            {
                m_module_id = _module_id;
            }

            /*!
             * @brief This function moves the value in member module_id
             * @param _module_id New value to be moved in member module_id
             */
            inline eProsima_user_DllExport void module_id(std::string &&_module_id)
            {
                m_module_id = std::move(_module_id);
            }

            /*!
             * @brief This function returns a constant reference to member module_id
             * @return Constant reference to member module_id
             */
            inline eProsima_user_DllExport const std::string& module_id() const
            {
                return m_module_id;
            }

            /*!
             * @brief This function returns a reference to member module_id
             * @return Reference to member module_id
             */
            inline eProsima_user_DllExport std::string& module_id()
            {
                return m_module_id;
            }
            /*!
             * @brief This function copies the value in member module_name
             * @param _module_name New value to be copied in member module_name
             */
            inline eProsima_user_DllExport void module_name(const std::string &_module_name)
            {
                m_module_name = _module_name;
            }

            /*!
             * @brief This function moves the value in member module_name
             * @param _module_name New value to be moved in member module_name
             */
            inline eProsima_user_DllExport void module_name(std::string &&_module_name)
            {
                m_module_name = std::move(_module_name);
            }

            /*!
             * @brief This function returns a constant reference to member module_name
             * @return Constant reference to member module_name
             */
            inline eProsima_user_DllExport const std::string& module_name() const
            {
                return m_module_name;
            }

            /*!
             * @brief This function returns a reference to member module_name
             * @return Reference to member module_name
             */
            inline eProsima_user_DllExport std::string& module_name()
            {
                return m_module_name;
            }
            /*!
             * @brief This function copies the value in member capability
             * @param _capability New value to be copied in member capability
             */
            inline eProsima_user_DllExport void capability(const std::string &_capability)
            {
                m_capability = _capability;
            }

            /*!
             * @brief This function moves the value in member capability
             * @param _capability New value to be moved in member capability
             */
            inline eProsima_user_DllExport void capability(std::string &&_capability)
            {
                m_capability = std::move(_capability);
            }

            /*!
             * @brief This function returns a constant reference to member capability
             * @return Constant reference to member capability
             */
            inline eProsima_user_DllExport const std::string& capability() const
            {
                return m_capability;
            }

            /*!
             * @brief This function returns a reference to member capability
             * @return Reference to member capability
             */
            inline eProsima_user_DllExport std::string& capability()
            {
                return m_capability;
            }
            /*!
             * @brief This function sets a value in member status_value
             * @param _status_value New value for member status_value
             */
            inline eProsima_user_DllExport void status_value(AMM::Capability::status_values _status_value)
            {
                m_status_value = _status_value;
            }

            /*!
             * @brief This function returns the value of member status_value
             * @return Value of member status_value
             */
            inline eProsima_user_DllExport AMM::Capability::status_values status_value() const
            {
                return m_status_value;
            }

            /*!
             * @brief This function returns a reference to member status_value
             * @return Reference to member status_value
             */
            inline eProsima_user_DllExport AMM::Capability::status_values& status_value()
            {
                return m_status_value;
            }
            /*!
             * @brief This function copies the value in member message
             * @param _message New value to be copied in member message
             */
            inline eProsima_user_DllExport void message(const std::vector<std::string> &_message)
            {
                m_message = _message;
            }

            /*!
             * @brief This function moves the value in member message
             * @param _message New value to be moved in member message
             */
            inline eProsima_user_DllExport void message(std::vector<std::string> &&_message)
            {
                m_message = std::move(_message);
            }

            /*!
             * @brief This function returns a constant reference to member message
             * @return Constant reference to member message
             */
            inline eProsima_user_DllExport const std::vector<std::string>& message() const
            {
                return m_message;
            }

            /*!
             * @brief This function returns a reference to member message
             * @return Reference to member message
             */
            inline eProsima_user_DllExport std::vector<std::string>& message()
            {
                return m_message;
            }

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Capability::Status& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            std::string m_module_id;
            std::string m_module_name;
            std::string m_capability;
            AMM::Capability::status_values m_status_value;
            std::vector<std::string> m_message;
        };
    }
    namespace Diagnostics
    {
        namespace Log
        {
            /*!
             * @brief This class represents the structure Record defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Record
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Record();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Record();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Diagnostics::Log::Record that will be copied.
                 */
                eProsima_user_DllExport Record(const Record &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Diagnostics::Log::Record that will be copied.
                 */
                eProsima_user_DllExport Record(Record &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Diagnostics::Log::Record that will be copied.
                 */
                eProsima_user_DllExport Record& operator=(const Record &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Diagnostics::Log::Record that will be copied.
                 */
                eProsima_user_DllExport Record& operator=(Record &&x);

                /*!
                 * @brief This function sets a value in member timestamp
                 * @param _timestamp New value for member timestamp
                 */
                inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
                {
                    m_timestamp = _timestamp;
                }

                /*!
                 * @brief This function returns the value of member timestamp
                 * @return Value of member timestamp
                 */
                inline eProsima_user_DllExport uint64_t timestamp() const
                {
                    return m_timestamp;
                }

                /*!
                 * @brief This function returns a reference to member timestamp
                 * @return Reference to member timestamp
                 */
                inline eProsima_user_DllExport uint64_t& timestamp()
                {
                    return m_timestamp;
                }
                /*!
                 * @brief This function copies the value in member log_level
                 * @param _log_level New value to be copied in member log_level
                 */
                inline eProsima_user_DllExport void log_level(const std::string &_log_level)
                {
                    m_log_level = _log_level;
                }

                /*!
                 * @brief This function moves the value in member log_level
                 * @param _log_level New value to be moved in member log_level
                 */
                inline eProsima_user_DllExport void log_level(std::string &&_log_level)
                {
                    m_log_level = std::move(_log_level);
                }

                /*!
                 * @brief This function returns a constant reference to member log_level
                 * @return Constant reference to member log_level
                 */
                inline eProsima_user_DllExport const std::string& log_level() const
                {
                    return m_log_level;
                }

                /*!
                 * @brief This function returns a reference to member log_level
                 * @return Reference to member log_level
                 */
                inline eProsima_user_DllExport std::string& log_level()
                {
                    return m_log_level;
                }
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                /*!
                 * @brief This function copies the value in member module_name
                 * @param _module_name New value to be copied in member module_name
                 */
                inline eProsima_user_DllExport void module_name(const std::string &_module_name)
                {
                    m_module_name = _module_name;
                }

                /*!
                 * @brief This function moves the value in member module_name
                 * @param _module_name New value to be moved in member module_name
                 */
                inline eProsima_user_DllExport void module_name(std::string &&_module_name)
                {
                    m_module_name = std::move(_module_name);
                }

                /*!
                 * @brief This function returns a constant reference to member module_name
                 * @return Constant reference to member module_name
                 */
                inline eProsima_user_DllExport const std::string& module_name() const
                {
                    return m_module_name;
                }

                /*!
                 * @brief This function returns a reference to member module_name
                 * @return Reference to member module_name
                 */
                inline eProsima_user_DllExport std::string& module_name()
                {
                    return m_module_name;
                }
                /*!
                 * @brief This function copies the value in member module_id
                 * @param _module_id New value to be copied in member module_id
                 */
                inline eProsima_user_DllExport void module_id(const std::string &_module_id)
                {
                    m_module_id = _module_id;
                }

                /*!
                 * @brief This function moves the value in member module_id
                 * @param _module_id New value to be moved in member module_id
                 */
                inline eProsima_user_DllExport void module_id(std::string &&_module_id)
                {
                    m_module_id = std::move(_module_id);
                }

                /*!
                 * @brief This function returns a constant reference to member module_id
                 * @return Constant reference to member module_id
                 */
                inline eProsima_user_DllExport const std::string& module_id() const
                {
                    return m_module_id;
                }

                /*!
                 * @brief This function returns a reference to member module_id
                 * @return Reference to member module_id
                 */
                inline eProsima_user_DllExport std::string& module_id()
                {
                    return m_module_id;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Diagnostics::Log::Record& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                uint64_t m_timestamp;
                std::string m_log_level;
                std::string m_message;
                std::string m_module_name;
                std::string m_module_id;
            };
        }
    }
}

#endif // _AMM_DIAGNOSTICS_LOG_AMM_H_