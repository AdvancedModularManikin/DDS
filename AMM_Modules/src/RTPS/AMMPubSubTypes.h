// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMMPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _AMM_PUBSUBTYPES_H_
#define _AMM_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

using namespace eprosima::fastrtps;

#include "AMM.h"

namespace AMM
{
    namespace Simulation
    {
        /*!
         * @brief This class represents the TopicDataType of the type Tick defined by the user in the IDL file.
         * @ingroup AMM
         */
        class TickPubSubType : public TopicDataType {
        public:
                typedef Tick type;

        	TickPubSubType();
        	virtual ~TickPubSubType();
        	bool serialize(void *data, SerializedPayload_t *payload);
        	bool deserialize(SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Physiology
    {
        /*!
         * @brief This class represents the TopicDataType of the type Node defined by the user in the IDL file.
         * @ingroup AMM
         */
        class NodePubSubType : public TopicDataType {
        public:
                typedef Node type;

        	NodePubSubType();
        	virtual ~NodePubSubType();
        	bool serialize(void *data, SerializedPayload_t *payload);
        	bool deserialize(SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        /*!
         * @brief This class represents the TopicDataType of the type HighFrequencyNode defined by the user in the IDL file.
         * @ingroup AMM
         */
        class HighFrequencyNodePubSubType : public TopicDataType {
        public:
                typedef HighFrequencyNode type;

        	HighFrequencyNodePubSubType();
        	virtual ~HighFrequencyNodePubSubType();
        	bool serialize(void *data, SerializedPayload_t *payload);
        	bool deserialize(SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace PatientAction
    {
        namespace BioGears
        {
            /*!
             * @brief This class represents the TopicDataType of the type Command defined by the user in the IDL file.
             * @ingroup AMM
             */
            class CommandPubSubType : public TopicDataType {
            public:
                    typedef Command type;

            	CommandPubSubType();
            	virtual ~CommandPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
    namespace Performance
    {
        /*!
         * @brief This class represents the TopicDataType of the type xAPIModifier defined by the user in the IDL file.
         * @ingroup AMM
         */
        class xAPIModifierPubSubType : public TopicDataType {
        public:
                typedef xAPIModifier type;

        	xAPIModifierPubSubType();
        	virtual ~xAPIModifierPubSubType();
        	bool serialize(void *data, SerializedPayload_t *payload);
        	bool deserialize(SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
        typedef std::vector<AMM::Performance::xAPIModifier> xAPI_Modifiers;
        /*!
         * @brief This class represents the TopicDataType of the type Statement defined by the user in the IDL file.
         * @ingroup AMM
         */
        class StatementPubSubType : public TopicDataType {
        public:
                typedef Statement type;

        	StatementPubSubType();
        	virtual ~StatementPubSubType();
        	bool serialize(void *data, SerializedPayload_t *payload);
        	bool deserialize(SerializedPayload_t *payload, void *data);
                std::function<uint32_t()> getSerializedSizeProvider(void* data);
        	bool getKey(void *data, InstanceHandle_t *ihandle);
        	void* createData();
        	void deleteData(void * data);
        	MD5 m_md5;
        	unsigned char* m_keyBuffer;
        };
    }
    namespace Sys
    {
        namespace Log
        {
            /*!
             * @brief This class represents the TopicDataType of the type info defined by the user in the IDL file.
             * @ingroup AMM
             */
            class infoPubSubType : public TopicDataType {
            public:
                    typedef info type;

            	infoPubSubType();
            	virtual ~infoPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type warning defined by the user in the IDL file.
             * @ingroup AMM
             */
            class warningPubSubType : public TopicDataType {
            public:
                    typedef warning type;

            	warningPubSubType();
            	virtual ~warningPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type error defined by the user in the IDL file.
             * @ingroup AMM
             */
            class errorPubSubType : public TopicDataType {
            public:
                    typedef error type;

            	errorPubSubType();
            	virtual ~errorPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type debug defined by the user in the IDL file.
             * @ingroup AMM
             */
            class debugPubSubType : public TopicDataType {
            public:
                    typedef debug type;

            	debugPubSubType();
            	virtual ~debugPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
}

#endif // _AMM_PUBSUBTYPE_H_