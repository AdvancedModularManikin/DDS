// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMM.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "AMM.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

AMM::Simulation::Tick::Tick()
{
    m_frame = 0;
    m_time = 0.0;
}

AMM::Simulation::Tick::~Tick()
{
}

AMM::Simulation::Tick::Tick(const Tick &x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Simulation::Tick::Tick(Tick &&x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Simulation::Tick& AMM::Simulation::Tick::operator=(const Tick &x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
    
    return *this;
}

AMM::Simulation::Tick& AMM::Simulation::Tick::operator=(Tick &&x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
    
    return *this;
}

size_t AMM::Simulation::Tick::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t AMM::Simulation::Tick::getCdrSerializedSize(const AMM::Simulation::Tick& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void AMM::Simulation::Tick::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame;
    scdr << m_time;
}

void AMM::Simulation::Tick::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame;
    dcdr >> m_time;
}

size_t AMM::Simulation::Tick::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool AMM::Simulation::Tick::isKeyDefined()
{
    return false;
}

void AMM::Simulation::Tick::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
}

AMM::Physiology::Node::Node()
{
    m_frame = 0;


    m_dbl = 0.0;

}

AMM::Physiology::Node::~Node()
{
}

AMM::Physiology::Node::Node(const Node &x)
{
    m_frame = x.m_frame;
    m_nodepath = x.m_nodepath;
    m_unit = x.m_unit;
    m_dbl = x.m_dbl;
    m_str = x.m_str;
}

AMM::Physiology::Node::Node(Node &&x)
{
    m_frame = x.m_frame;
    m_nodepath = std::move(x.m_nodepath);
    m_unit = std::move(x.m_unit);
    m_dbl = x.m_dbl;
    m_str = std::move(x.m_str);
}

AMM::Physiology::Node& AMM::Physiology::Node::operator=(const Node &x)
{
    m_frame = x.m_frame;
    m_nodepath = x.m_nodepath;
    m_unit = x.m_unit;
    m_dbl = x.m_dbl;
    m_str = x.m_str;
    
    return *this;
}

AMM::Physiology::Node& AMM::Physiology::Node::operator=(Node &&x)
{
    m_frame = x.m_frame;
    m_nodepath = std::move(x.m_nodepath);
    m_unit = std::move(x.m_unit);
    m_dbl = x.m_dbl;
    m_str = std::move(x.m_str);
    
    return *this;
}

size_t AMM::Physiology::Node::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t AMM::Physiology::Node::getCdrSerializedSize(const AMM::Physiology::Node& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.nodepath().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.unit().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.str().size() + 1;


    return current_alignment - initial_alignment;
}

void AMM::Physiology::Node::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame;
    scdr << m_nodepath;
    scdr << m_unit;
    scdr << m_dbl;
    scdr << m_str;
}

void AMM::Physiology::Node::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame;
    dcdr >> m_nodepath;
    dcdr >> m_unit;
    dcdr >> m_dbl;
    dcdr >> m_str;
}

size_t AMM::Physiology::Node::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            






    return current_align;
}

bool AMM::Physiology::Node::isKeyDefined()
{
    return false;
}

void AMM::Physiology::Node::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
}
AMM::Physiology::HighFrequencyNode::HighFrequencyNode()
{
    m_frame = 0;


    m_dbl = 0.0;

}

AMM::Physiology::HighFrequencyNode::~HighFrequencyNode()
{
}

AMM::Physiology::HighFrequencyNode::HighFrequencyNode(const HighFrequencyNode &x)
{
    m_frame = x.m_frame;
    m_nodepath = x.m_nodepath;
    m_unit = x.m_unit;
    m_dbl = x.m_dbl;
    m_str = x.m_str;
}

AMM::Physiology::HighFrequencyNode::HighFrequencyNode(HighFrequencyNode &&x)
{
    m_frame = x.m_frame;
    m_nodepath = std::move(x.m_nodepath);
    m_unit = std::move(x.m_unit);
    m_dbl = x.m_dbl;
    m_str = std::move(x.m_str);
}

AMM::Physiology::HighFrequencyNode& AMM::Physiology::HighFrequencyNode::operator=(const HighFrequencyNode &x)
{
    m_frame = x.m_frame;
    m_nodepath = x.m_nodepath;
    m_unit = x.m_unit;
    m_dbl = x.m_dbl;
    m_str = x.m_str;
    
    return *this;
}

AMM::Physiology::HighFrequencyNode& AMM::Physiology::HighFrequencyNode::operator=(HighFrequencyNode &&x)
{
    m_frame = x.m_frame;
    m_nodepath = std::move(x.m_nodepath);
    m_unit = std::move(x.m_unit);
    m_dbl = x.m_dbl;
    m_str = std::move(x.m_str);
    
    return *this;
}

size_t AMM::Physiology::HighFrequencyNode::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t AMM::Physiology::HighFrequencyNode::getCdrSerializedSize(const AMM::Physiology::HighFrequencyNode& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.nodepath().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.unit().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.str().size() + 1;


    return current_alignment - initial_alignment;
}

void AMM::Physiology::HighFrequencyNode::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame;
    scdr << m_nodepath;
    scdr << m_unit;
    scdr << m_dbl;
    scdr << m_str;
}

void AMM::Physiology::HighFrequencyNode::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame;
    dcdr >> m_nodepath;
    dcdr >> m_unit;
    dcdr >> m_dbl;
    dcdr >> m_str;
}

size_t AMM::Physiology::HighFrequencyNode::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            






    return current_align;
}

bool AMM::Physiology::HighFrequencyNode::isKeyDefined()
{
    return false;
}

void AMM::Physiology::HighFrequencyNode::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
}

AMM::PatientAction::BioGears::Command::Command()
{
}

AMM::PatientAction::BioGears::Command::~Command()
{
}

AMM::PatientAction::BioGears::Command::Command(const Command &x)
{
    m_message = x.m_message;
}

AMM::PatientAction::BioGears::Command::Command(Command &&x)
{
    m_message = std::move(x.m_message);
}

AMM::PatientAction::BioGears::Command& AMM::PatientAction::BioGears::Command::operator=(const Command &x)
{
    m_message = x.m_message;
    
    return *this;
}

AMM::PatientAction::BioGears::Command& AMM::PatientAction::BioGears::Command::operator=(Command &&x)
{
    m_message = std::move(x.m_message);
    
    return *this;
}

size_t AMM::PatientAction::BioGears::Command::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::PatientAction::BioGears::Command::getCdrSerializedSize(const AMM::PatientAction::BioGears::Command& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::PatientAction::BioGears::Command::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::PatientAction::BioGears::Command::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::PatientAction::BioGears::Command::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::PatientAction::BioGears::Command::isKeyDefined()
{
    return false;
}

void AMM::PatientAction::BioGears::Command::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
}


AMM::Performance::xAPIModifier::xAPIModifier()
{


}

AMM::Performance::xAPIModifier::~xAPIModifier()
{
}

AMM::Performance::xAPIModifier::xAPIModifier(const xAPIModifier &x)
{
    m_key = x.m_key;
    m_value = x.m_value;
}

AMM::Performance::xAPIModifier::xAPIModifier(xAPIModifier &&x)
{
    m_key = std::move(x.m_key);
    m_value = std::move(x.m_value);
}

AMM::Performance::xAPIModifier& AMM::Performance::xAPIModifier::operator=(const xAPIModifier &x)
{
    m_key = x.m_key;
    m_value = x.m_value;
    
    return *this;
}

AMM::Performance::xAPIModifier& AMM::Performance::xAPIModifier::operator=(xAPIModifier &&x)
{
    m_key = std::move(x.m_key);
    m_value = std::move(x.m_value);
    
    return *this;
}

size_t AMM::Performance::xAPIModifier::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t AMM::Performance::xAPIModifier::getCdrSerializedSize(const AMM::Performance::xAPIModifier& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.key().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.value().size() + 1;


    return current_alignment - initial_alignment;
}

void AMM::Performance::xAPIModifier::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_key;
    scdr << m_value;
}

void AMM::Performance::xAPIModifier::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_key;
    dcdr >> m_value;
}

size_t AMM::Performance::xAPIModifier::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool AMM::Performance::xAPIModifier::isKeyDefined()
{
    return false;
}

void AMM::Performance::xAPIModifier::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
}

AMM::Performance::Statement::Statement()
{






}

AMM::Performance::Statement::~Statement()
{
}

AMM::Performance::Statement::Statement(const Statement &x)
{
    m_noun = x.m_noun;
    m_noun_modifiers = x.m_noun_modifiers;
    m_verb = x.m_verb;
    m_verb_modifiers = x.m_verb_modifiers;
    m_obj = x.m_obj;
    m_obj_modifiers = x.m_obj_modifiers;
}

AMM::Performance::Statement::Statement(Statement &&x)
{
    m_noun = std::move(x.m_noun);
    m_noun_modifiers = std::move(x.m_noun_modifiers);
    m_verb = std::move(x.m_verb);
    m_verb_modifiers = std::move(x.m_verb_modifiers);
    m_obj = std::move(x.m_obj);
    m_obj_modifiers = std::move(x.m_obj_modifiers);
}

AMM::Performance::Statement& AMM::Performance::Statement::operator=(const Statement &x)
{
    m_noun = x.m_noun;
    m_noun_modifiers = x.m_noun_modifiers;
    m_verb = x.m_verb;
    m_verb_modifiers = x.m_verb_modifiers;
    m_obj = x.m_obj;
    m_obj_modifiers = x.m_obj_modifiers;
    
    return *this;
}

AMM::Performance::Statement& AMM::Performance::Statement::operator=(Statement &&x)
{
    m_noun = std::move(x.m_noun);
    m_noun_modifiers = std::move(x.m_noun_modifiers);
    m_verb = std::move(x.m_verb);
    m_verb_modifiers = std::move(x.m_verb_modifiers);
    m_obj = std::move(x.m_obj);
    m_obj_modifiers = std::move(x.m_obj_modifiers);
    
    return *this;
}

size_t AMM::Performance::Statement::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t AMM::Performance::Statement::getCdrSerializedSize(const AMM::Performance::Statement& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.noun().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < data.noun_modifiers().size(); ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getCdrSerializedSize(data.noun_modifiers().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.verb().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < data.verb_modifiers().size(); ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getCdrSerializedSize(data.verb_modifiers().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.obj().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    for(size_t a = 0; a < data.obj_modifiers().size(); ++a)
    {
        current_alignment += AMM::Performance::xAPIModifier::getCdrSerializedSize(data.obj_modifiers().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void AMM::Performance::Statement::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_noun;
    scdr << m_noun_modifiers;
    scdr << m_verb;
    scdr << m_verb_modifiers;
    scdr << m_obj;
    scdr << m_obj_modifiers;
}

void AMM::Performance::Statement::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_noun;
    dcdr >> m_noun_modifiers;
    dcdr >> m_verb;
    dcdr >> m_verb_modifiers;
    dcdr >> m_obj;
    dcdr >> m_obj_modifiers;
}

size_t AMM::Performance::Statement::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            







    return current_align;
}

bool AMM::Performance::Statement::isKeyDefined()
{
    return false;
}

void AMM::Performance::Statement::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
}

AMM::Sys::Log::info::info()
{
}

AMM::Sys::Log::info::~info()
{
}

AMM::Sys::Log::info::info(const info &x)
{
    m_message = x.m_message;
}

AMM::Sys::Log::info::info(info &&x)
{
    m_message = std::move(x.m_message);
}

AMM::Sys::Log::info& AMM::Sys::Log::info::operator=(const info &x)
{
    m_message = x.m_message;
    
    return *this;
}

AMM::Sys::Log::info& AMM::Sys::Log::info::operator=(info &&x)
{
    m_message = std::move(x.m_message);
    
    return *this;
}

size_t AMM::Sys::Log::info::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Sys::Log::info::getCdrSerializedSize(const AMM::Sys::Log::info& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Sys::Log::info::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::Sys::Log::info::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::Sys::Log::info::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::Sys::Log::info::isKeyDefined()
{
    return false;
}

void AMM::Sys::Log::info::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
}
AMM::Sys::Log::warning::warning()
{
}

AMM::Sys::Log::warning::~warning()
{
}

AMM::Sys::Log::warning::warning(const warning &x)
{
    m_message = x.m_message;
}

AMM::Sys::Log::warning::warning(warning &&x)
{
    m_message = std::move(x.m_message);
}

AMM::Sys::Log::warning& AMM::Sys::Log::warning::operator=(const warning &x)
{
    m_message = x.m_message;
    
    return *this;
}

AMM::Sys::Log::warning& AMM::Sys::Log::warning::operator=(warning &&x)
{
    m_message = std::move(x.m_message);
    
    return *this;
}

size_t AMM::Sys::Log::warning::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Sys::Log::warning::getCdrSerializedSize(const AMM::Sys::Log::warning& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Sys::Log::warning::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::Sys::Log::warning::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::Sys::Log::warning::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::Sys::Log::warning::isKeyDefined()
{
    return false;
}

void AMM::Sys::Log::warning::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
}
AMM::Sys::Log::error::error()
{
}

AMM::Sys::Log::error::~error()
{
}

AMM::Sys::Log::error::error(const error &x)
{
    m_message = x.m_message;
}

AMM::Sys::Log::error::error(error &&x)
{
    m_message = std::move(x.m_message);
}

AMM::Sys::Log::error& AMM::Sys::Log::error::operator=(const error &x)
{
    m_message = x.m_message;
    
    return *this;
}

AMM::Sys::Log::error& AMM::Sys::Log::error::operator=(error &&x)
{
    m_message = std::move(x.m_message);
    
    return *this;
}

size_t AMM::Sys::Log::error::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Sys::Log::error::getCdrSerializedSize(const AMM::Sys::Log::error& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Sys::Log::error::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::Sys::Log::error::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::Sys::Log::error::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::Sys::Log::error::isKeyDefined()
{
    return false;
}

void AMM::Sys::Log::error::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
}
AMM::Sys::Log::debug::debug()
{
}

AMM::Sys::Log::debug::~debug()
{
}

AMM::Sys::Log::debug::debug(const debug &x)
{
    m_message = x.m_message;
}

AMM::Sys::Log::debug::debug(debug &&x)
{
    m_message = std::move(x.m_message);
}

AMM::Sys::Log::debug& AMM::Sys::Log::debug::operator=(const debug &x)
{
    m_message = x.m_message;
    
    return *this;
}

AMM::Sys::Log::debug& AMM::Sys::Log::debug::operator=(debug &&x)
{
    m_message = std::move(x.m_message);
    
    return *this;
}

size_t AMM::Sys::Log::debug::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Sys::Log::debug::getCdrSerializedSize(const AMM::Sys::Log::debug& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Sys::Log::debug::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::Sys::Log::debug::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::Sys::Log::debug::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::Sys::Log::debug::isKeyDefined()
{
    return false;
}

void AMM::Sys::Log::debug::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
}


