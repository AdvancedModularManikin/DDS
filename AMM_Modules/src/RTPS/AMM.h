// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMM.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _AMM_H_
#define _AMM_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AMM_SOURCE)
#define AMM_DllAPI __declspec( dllexport )
#else
#define AMM_DllAPI __declspec( dllimport )
#endif // AMM_SOURCE
#else
#define AMM_DllAPI
#endif
#else
#define AMM_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace AMM
{
    namespace Simulation
    {
        /*!
         * @brief This class represents the structure Tick defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Tick
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Tick();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Tick();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick(const Tick &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick(Tick &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick& operator=(const Tick &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Simulation::Tick that will be copied.
             */
            eProsima_user_DllExport Tick& operator=(Tick &&x);
            
            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function sets a value in member time
             * @param _time New value for member time
             */
            inline eProsima_user_DllExport void time(float _time)
            {
                m_time = _time;
            }

            /*!
             * @brief This function returns the value of member time
             * @return Value of member time
             */
            inline eProsima_user_DllExport float time() const
            {
                return m_time;
            }

            /*!
             * @brief This function returns a reference to member time
             * @return Reference to member time
             */
            inline eProsima_user_DllExport float& time()
            {
                return m_time;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Simulation::Tick& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int64_t m_frame;
            float m_time;
        };
    }
    namespace Physiology
    {
        /*!
         * @brief This class represents the structure Node defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Node
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Node();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Node();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node(const Node &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node(Node &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node& operator=(const Node &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::Node that will be copied.
             */
            eProsima_user_DllExport Node& operator=(Node &&x);
            
            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function copies the value in member nodepath
             * @param _nodepath New value to be copied in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(const std::string &_nodepath)
            {
                m_nodepath = _nodepath;
            }

            /*!
             * @brief This function moves the value in member nodepath
             * @param _nodepath New value to be moved in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(std::string &&_nodepath)
            {
                m_nodepath = std::move(_nodepath);
            }

            /*!
             * @brief This function returns a constant reference to member nodepath
             * @return Constant reference to member nodepath
             */
            inline eProsima_user_DllExport const std::string& nodepath() const
            {
                return m_nodepath;
            }

            /*!
             * @brief This function returns a reference to member nodepath
             * @return Reference to member nodepath
             */
            inline eProsima_user_DllExport std::string& nodepath()
            {
                return m_nodepath;
            }
            /*!
             * @brief This function copies the value in member unit
             * @param _unit New value to be copied in member unit
             */
            inline eProsima_user_DllExport void unit(const std::string &_unit)
            {
                m_unit = _unit;
            }

            /*!
             * @brief This function moves the value in member unit
             * @param _unit New value to be moved in member unit
             */
            inline eProsima_user_DllExport void unit(std::string &&_unit)
            {
                m_unit = std::move(_unit);
            }

            /*!
             * @brief This function returns a constant reference to member unit
             * @return Constant reference to member unit
             */
            inline eProsima_user_DllExport const std::string& unit() const
            {
                return m_unit;
            }

            /*!
             * @brief This function returns a reference to member unit
             * @return Reference to member unit
             */
            inline eProsima_user_DllExport std::string& unit()
            {
                return m_unit;
            }
            /*!
             * @brief This function sets a value in member dbl
             * @param _dbl New value for member dbl
             */
            inline eProsima_user_DllExport void dbl(double _dbl)
            {
                m_dbl = _dbl;
            }

            /*!
             * @brief This function returns the value of member dbl
             * @return Value of member dbl
             */
            inline eProsima_user_DllExport double dbl() const
            {
                return m_dbl;
            }

            /*!
             * @brief This function returns a reference to member dbl
             * @return Reference to member dbl
             */
            inline eProsima_user_DllExport double& dbl()
            {
                return m_dbl;
            }
            /*!
             * @brief This function copies the value in member str
             * @param _str New value to be copied in member str
             */
            inline eProsima_user_DllExport void str(const std::string &_str)
            {
                m_str = _str;
            }

            /*!
             * @brief This function moves the value in member str
             * @param _str New value to be moved in member str
             */
            inline eProsima_user_DllExport void str(std::string &&_str)
            {
                m_str = std::move(_str);
            }

            /*!
             * @brief This function returns a constant reference to member str
             * @return Constant reference to member str
             */
            inline eProsima_user_DllExport const std::string& str() const
            {
                return m_str;
            }

            /*!
             * @brief This function returns a reference to member str
             * @return Reference to member str
             */
            inline eProsima_user_DllExport std::string& str()
            {
                return m_str;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::Node& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int64_t m_frame;
            std::string m_nodepath;
            std::string m_unit;
            double m_dbl;
            std::string m_str;
        };
        /*!
         * @brief This class represents the structure HighFrequencyNode defined by the user in the IDL file.
         * @ingroup AMM
         */
        class HighFrequencyNode
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport HighFrequencyNode();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~HighFrequencyNode();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode(const HighFrequencyNode &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode(HighFrequencyNode &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode& operator=(const HighFrequencyNode &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Physiology::HighFrequencyNode that will be copied.
             */
            eProsima_user_DllExport HighFrequencyNode& operator=(HighFrequencyNode &&x);
            
            /*!
             * @brief This function sets a value in member frame
             * @param _frame New value for member frame
             */
            inline eProsima_user_DllExport void frame(int64_t _frame)
            {
                m_frame = _frame;
            }

            /*!
             * @brief This function returns the value of member frame
             * @return Value of member frame
             */
            inline eProsima_user_DllExport int64_t frame() const
            {
                return m_frame;
            }

            /*!
             * @brief This function returns a reference to member frame
             * @return Reference to member frame
             */
            inline eProsima_user_DllExport int64_t& frame()
            {
                return m_frame;
            }
            /*!
             * @brief This function copies the value in member nodepath
             * @param _nodepath New value to be copied in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(const std::string &_nodepath)
            {
                m_nodepath = _nodepath;
            }

            /*!
             * @brief This function moves the value in member nodepath
             * @param _nodepath New value to be moved in member nodepath
             */
            inline eProsima_user_DllExport void nodepath(std::string &&_nodepath)
            {
                m_nodepath = std::move(_nodepath);
            }

            /*!
             * @brief This function returns a constant reference to member nodepath
             * @return Constant reference to member nodepath
             */
            inline eProsima_user_DllExport const std::string& nodepath() const
            {
                return m_nodepath;
            }

            /*!
             * @brief This function returns a reference to member nodepath
             * @return Reference to member nodepath
             */
            inline eProsima_user_DllExport std::string& nodepath()
            {
                return m_nodepath;
            }
            /*!
             * @brief This function copies the value in member unit
             * @param _unit New value to be copied in member unit
             */
            inline eProsima_user_DllExport void unit(const std::string &_unit)
            {
                m_unit = _unit;
            }

            /*!
             * @brief This function moves the value in member unit
             * @param _unit New value to be moved in member unit
             */
            inline eProsima_user_DllExport void unit(std::string &&_unit)
            {
                m_unit = std::move(_unit);
            }

            /*!
             * @brief This function returns a constant reference to member unit
             * @return Constant reference to member unit
             */
            inline eProsima_user_DllExport const std::string& unit() const
            {
                return m_unit;
            }

            /*!
             * @brief This function returns a reference to member unit
             * @return Reference to member unit
             */
            inline eProsima_user_DllExport std::string& unit()
            {
                return m_unit;
            }
            /*!
             * @brief This function sets a value in member dbl
             * @param _dbl New value for member dbl
             */
            inline eProsima_user_DllExport void dbl(double _dbl)
            {
                m_dbl = _dbl;
            }

            /*!
             * @brief This function returns the value of member dbl
             * @return Value of member dbl
             */
            inline eProsima_user_DllExport double dbl() const
            {
                return m_dbl;
            }

            /*!
             * @brief This function returns a reference to member dbl
             * @return Reference to member dbl
             */
            inline eProsima_user_DllExport double& dbl()
            {
                return m_dbl;
            }
            /*!
             * @brief This function copies the value in member str
             * @param _str New value to be copied in member str
             */
            inline eProsima_user_DllExport void str(const std::string &_str)
            {
                m_str = _str;
            }

            /*!
             * @brief This function moves the value in member str
             * @param _str New value to be moved in member str
             */
            inline eProsima_user_DllExport void str(std::string &&_str)
            {
                m_str = std::move(_str);
            }

            /*!
             * @brief This function returns a constant reference to member str
             * @return Constant reference to member str
             */
            inline eProsima_user_DllExport const std::string& str() const
            {
                return m_str;
            }

            /*!
             * @brief This function returns a reference to member str
             * @return Reference to member str
             */
            inline eProsima_user_DllExport std::string& str()
            {
                return m_str;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Physiology::HighFrequencyNode& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int64_t m_frame;
            std::string m_nodepath;
            std::string m_unit;
            double m_dbl;
            std::string m_str;
        };
    }
    namespace PatientAction
    {
        namespace BioGears
        {
            /*!
             * @brief This class represents the structure Command defined by the user in the IDL file.
             * @ingroup AMM
             */
            class Command
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Command();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Command();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command(const Command &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command(Command &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command& operator=(const Command &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::PatientAction::BioGears::Command that will be copied.
                 */
                eProsima_user_DllExport Command& operator=(Command &&x);
                
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::PatientAction::BioGears::Command& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::string m_message;
            };
        }
    }
    namespace Performance
    {
        /*!
         * @brief This class represents the structure xAPIModifier defined by the user in the IDL file.
         * @ingroup AMM
         */
        class xAPIModifier
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport xAPIModifier();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~xAPIModifier();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier(const xAPIModifier &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier(xAPIModifier &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier& operator=(const xAPIModifier &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Performance::xAPIModifier that will be copied.
             */
            eProsima_user_DllExport xAPIModifier& operator=(xAPIModifier &&x);
            
            /*!
             * @brief This function copies the value in member key
             * @param _key New value to be copied in member key
             */
            inline eProsima_user_DllExport void key(const std::string &_key)
            {
                m_key = _key;
            }

            /*!
             * @brief This function moves the value in member key
             * @param _key New value to be moved in member key
             */
            inline eProsima_user_DllExport void key(std::string &&_key)
            {
                m_key = std::move(_key);
            }

            /*!
             * @brief This function returns a constant reference to member key
             * @return Constant reference to member key
             */
            inline eProsima_user_DllExport const std::string& key() const
            {
                return m_key;
            }

            /*!
             * @brief This function returns a reference to member key
             * @return Reference to member key
             */
            inline eProsima_user_DllExport std::string& key()
            {
                return m_key;
            }
            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            inline eProsima_user_DllExport void value(const std::string &_value)
            {
                m_value = _value;
            }

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            inline eProsima_user_DllExport void value(std::string &&_value)
            {
                m_value = std::move(_value);
            }

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            inline eProsima_user_DllExport const std::string& value() const
            {
                return m_value;
            }

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            inline eProsima_user_DllExport std::string& value()
            {
                return m_value;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Performance::xAPIModifier& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_key;
            std::string m_value;
        };
        typedef std::vector<AMM::Performance::xAPIModifier> xAPI_Modifiers;
        /*!
         * @brief This class represents the structure Statement defined by the user in the IDL file.
         * @ingroup AMM
         */
        class Statement
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Statement();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Statement();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement(const Statement &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement(Statement &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement& operator=(const Statement &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object AMM::Performance::Statement that will be copied.
             */
            eProsima_user_DllExport Statement& operator=(Statement &&x);
            
            /*!
             * @brief This function copies the value in member noun
             * @param _noun New value to be copied in member noun
             */
            inline eProsima_user_DllExport void noun(const std::string &_noun)
            {
                m_noun = _noun;
            }

            /*!
             * @brief This function moves the value in member noun
             * @param _noun New value to be moved in member noun
             */
            inline eProsima_user_DllExport void noun(std::string &&_noun)
            {
                m_noun = std::move(_noun);
            }

            /*!
             * @brief This function returns a constant reference to member noun
             * @return Constant reference to member noun
             */
            inline eProsima_user_DllExport const std::string& noun() const
            {
                return m_noun;
            }

            /*!
             * @brief This function returns a reference to member noun
             * @return Reference to member noun
             */
            inline eProsima_user_DllExport std::string& noun()
            {
                return m_noun;
            }
            /*!
             * @brief This function copies the value in member noun_modifiers
             * @param _noun_modifiers New value to be copied in member noun_modifiers
             */
            inline eProsima_user_DllExport void noun_modifiers(const AMM::Performance::xAPI_Modifiers &_noun_modifiers)
            {
                m_noun_modifiers = _noun_modifiers;
            }

            /*!
             * @brief This function moves the value in member noun_modifiers
             * @param _noun_modifiers New value to be moved in member noun_modifiers
             */
            inline eProsima_user_DllExport void noun_modifiers(AMM::Performance::xAPI_Modifiers &&_noun_modifiers)
            {
                m_noun_modifiers = std::move(_noun_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member noun_modifiers
             * @return Constant reference to member noun_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& noun_modifiers() const
            {
                return m_noun_modifiers;
            }

            /*!
             * @brief This function returns a reference to member noun_modifiers
             * @return Reference to member noun_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& noun_modifiers()
            {
                return m_noun_modifiers;
            }
            /*!
             * @brief This function copies the value in member verb
             * @param _verb New value to be copied in member verb
             */
            inline eProsima_user_DllExport void verb(const std::string &_verb)
            {
                m_verb = _verb;
            }

            /*!
             * @brief This function moves the value in member verb
             * @param _verb New value to be moved in member verb
             */
            inline eProsima_user_DllExport void verb(std::string &&_verb)
            {
                m_verb = std::move(_verb);
            }

            /*!
             * @brief This function returns a constant reference to member verb
             * @return Constant reference to member verb
             */
            inline eProsima_user_DllExport const std::string& verb() const
            {
                return m_verb;
            }

            /*!
             * @brief This function returns a reference to member verb
             * @return Reference to member verb
             */
            inline eProsima_user_DllExport std::string& verb()
            {
                return m_verb;
            }
            /*!
             * @brief This function copies the value in member verb_modifiers
             * @param _verb_modifiers New value to be copied in member verb_modifiers
             */
            inline eProsima_user_DllExport void verb_modifiers(const AMM::Performance::xAPI_Modifiers &_verb_modifiers)
            {
                m_verb_modifiers = _verb_modifiers;
            }

            /*!
             * @brief This function moves the value in member verb_modifiers
             * @param _verb_modifiers New value to be moved in member verb_modifiers
             */
            inline eProsima_user_DllExport void verb_modifiers(AMM::Performance::xAPI_Modifiers &&_verb_modifiers)
            {
                m_verb_modifiers = std::move(_verb_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member verb_modifiers
             * @return Constant reference to member verb_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& verb_modifiers() const
            {
                return m_verb_modifiers;
            }

            /*!
             * @brief This function returns a reference to member verb_modifiers
             * @return Reference to member verb_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& verb_modifiers()
            {
                return m_verb_modifiers;
            }
            /*!
             * @brief This function copies the value in member obj
             * @param _obj New value to be copied in member obj
             */
            inline eProsima_user_DllExport void obj(const std::string &_obj)
            {
                m_obj = _obj;
            }

            /*!
             * @brief This function moves the value in member obj
             * @param _obj New value to be moved in member obj
             */
            inline eProsima_user_DllExport void obj(std::string &&_obj)
            {
                m_obj = std::move(_obj);
            }

            /*!
             * @brief This function returns a constant reference to member obj
             * @return Constant reference to member obj
             */
            inline eProsima_user_DllExport const std::string& obj() const
            {
                return m_obj;
            }

            /*!
             * @brief This function returns a reference to member obj
             * @return Reference to member obj
             */
            inline eProsima_user_DllExport std::string& obj()
            {
                return m_obj;
            }
            /*!
             * @brief This function copies the value in member obj_modifiers
             * @param _obj_modifiers New value to be copied in member obj_modifiers
             */
            inline eProsima_user_DllExport void obj_modifiers(const AMM::Performance::xAPI_Modifiers &_obj_modifiers)
            {
                m_obj_modifiers = _obj_modifiers;
            }

            /*!
             * @brief This function moves the value in member obj_modifiers
             * @param _obj_modifiers New value to be moved in member obj_modifiers
             */
            inline eProsima_user_DllExport void obj_modifiers(AMM::Performance::xAPI_Modifiers &&_obj_modifiers)
            {
                m_obj_modifiers = std::move(_obj_modifiers);
            }

            /*!
             * @brief This function returns a constant reference to member obj_modifiers
             * @return Constant reference to member obj_modifiers
             */
            inline eProsima_user_DllExport const AMM::Performance::xAPI_Modifiers& obj_modifiers() const
            {
                return m_obj_modifiers;
            }

            /*!
             * @brief This function returns a reference to member obj_modifiers
             * @return Reference to member obj_modifiers
             */
            inline eProsima_user_DllExport AMM::Performance::xAPI_Modifiers& obj_modifiers()
            {
                return m_obj_modifiers;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Performance::Statement& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_noun;
            AMM::Performance::xAPI_Modifiers m_noun_modifiers;
            std::string m_verb;
            AMM::Performance::xAPI_Modifiers m_verb_modifiers;
            std::string m_obj;
            AMM::Performance::xAPI_Modifiers m_obj_modifiers;
        };
    }
    namespace Sys
    {
        namespace Log
        {
            /*!
             * @brief This class represents the structure info defined by the user in the IDL file.
             * @ingroup AMM
             */
            class info
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport info();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~info();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Sys::Log::info that will be copied.
                 */
                eProsima_user_DllExport info(const info &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Sys::Log::info that will be copied.
                 */
                eProsima_user_DllExport info(info &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Sys::Log::info that will be copied.
                 */
                eProsima_user_DllExport info& operator=(const info &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Sys::Log::info that will be copied.
                 */
                eProsima_user_DllExport info& operator=(info &&x);
                
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Sys::Log::info& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::string m_message;
            };
            /*!
             * @brief This class represents the structure warning defined by the user in the IDL file.
             * @ingroup AMM
             */
            class warning
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport warning();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~warning();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Sys::Log::warning that will be copied.
                 */
                eProsima_user_DllExport warning(const warning &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Sys::Log::warning that will be copied.
                 */
                eProsima_user_DllExport warning(warning &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Sys::Log::warning that will be copied.
                 */
                eProsima_user_DllExport warning& operator=(const warning &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Sys::Log::warning that will be copied.
                 */
                eProsima_user_DllExport warning& operator=(warning &&x);
                
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Sys::Log::warning& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::string m_message;
            };
            /*!
             * @brief This class represents the structure error defined by the user in the IDL file.
             * @ingroup AMM
             */
            class error
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport error();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~error();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Sys::Log::error that will be copied.
                 */
                eProsima_user_DllExport error(const error &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Sys::Log::error that will be copied.
                 */
                eProsima_user_DllExport error(error &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Sys::Log::error that will be copied.
                 */
                eProsima_user_DllExport error& operator=(const error &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Sys::Log::error that will be copied.
                 */
                eProsima_user_DllExport error& operator=(error &&x);
                
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Sys::Log::error& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::string m_message;
            };
            /*!
             * @brief This class represents the structure debug defined by the user in the IDL file.
             * @ingroup AMM
             */
            class debug
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport debug();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~debug();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object AMM::Sys::Log::debug that will be copied.
                 */
                eProsima_user_DllExport debug(const debug &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object AMM::Sys::Log::debug that will be copied.
                 */
                eProsima_user_DllExport debug(debug &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object AMM::Sys::Log::debug that will be copied.
                 */
                eProsima_user_DllExport debug& operator=(const debug &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object AMM::Sys::Log::debug that will be copied.
                 */
                eProsima_user_DllExport debug& operator=(debug &&x);
                
                /*!
                 * @brief This function copies the value in member message
                 * @param _message New value to be copied in member message
                 */
                inline eProsima_user_DllExport void message(const std::string &_message)
                {
                    m_message = _message;
                }

                /*!
                 * @brief This function moves the value in member message
                 * @param _message New value to be moved in member message
                 */
                inline eProsima_user_DllExport void message(std::string &&_message)
                {
                    m_message = std::move(_message);
                }

                /*!
                 * @brief This function returns a constant reference to member message
                 * @return Constant reference to member message
                 */
                inline eProsima_user_DllExport const std::string& message() const
                {
                    return m_message;
                }

                /*!
                 * @brief This function returns a reference to member message
                 * @return Reference to member message
                 */
                inline eProsima_user_DllExport std::string& message()
                {
                    return m_message;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Sys::Log::debug& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::string m_message;
            };
        }
    }
}

#endif // _AMM_H_