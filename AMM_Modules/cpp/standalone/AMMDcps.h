//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: AMMDcps.h
//  Source: AMMDcps.idl
//  Generated: Tue May 30 11:02:44 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _AMMDCPS_H_
#define _AMMDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "AMM.h"


namespace AMM
{
   namespace Simulation
   {

      class TickTypeSupportInterface;

      typedef TickTypeSupportInterface * TickTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < TickTypeSupportInterface> TickTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < TickTypeSupportInterface> TickTypeSupportInterface_out;


      class TickDataWriter;

      typedef TickDataWriter * TickDataWriter_ptr;
      typedef DDS_DCPSInterface_var < TickDataWriter> TickDataWriter_var;
      typedef DDS_DCPSInterface_out < TickDataWriter> TickDataWriter_out;


      class TickDataReader;

      typedef TickDataReader * TickDataReader_ptr;
      typedef DDS_DCPSInterface_var < TickDataReader> TickDataReader_var;
      typedef DDS_DCPSInterface_out < TickDataReader> TickDataReader_out;


      class TickDataReaderView;

      typedef TickDataReaderView * TickDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < TickDataReaderView> TickDataReaderView_var;
      typedef DDS_DCPSInterface_out < TickDataReaderView> TickDataReaderView_out;

      struct TickSeq_uniq_ {};
      typedef DDS_DCPSUFLSeq < Tick, struct TickSeq_uniq_> TickSeq;
      typedef DDS_DCPSSequence_var < TickSeq> TickSeq_var;
      typedef DDS_DCPSSequence_out < TickSeq> TickSeq_out;
      class TickTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef TickTypeSupportInterface_ptr _ptr_type;
         typedef TickTypeSupportInterface_var _var_type;

         static TickTypeSupportInterface_ptr _duplicate (TickTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static TickTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         TickTypeSupportInterface_ptr _this () { return this; }


      protected:
         TickTypeSupportInterface () {};
         ~TickTypeSupportInterface () {};
      private:
         TickTypeSupportInterface (const TickTypeSupportInterface &);
         TickTypeSupportInterface & operator = (const TickTypeSupportInterface &);
      };

      class TickDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef TickDataWriter_ptr _ptr_type;
         typedef TickDataWriter_var _var_type;

         static TickDataWriter_ptr _duplicate (TickDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static TickDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const Tick& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const Tick& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance_data) = 0;

      protected:
         TickDataWriter () {};
         ~TickDataWriter () {};
      private:
         TickDataWriter (const TickDataWriter &);
         TickDataWriter & operator = (const TickDataWriter &);
      };

      class TickDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef TickDataReader_ptr _ptr_type;
         typedef TickDataReader_var _var_type;

         static TickDataReader_ptr _duplicate (TickDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataReader_ptr _narrow (DDS::Object_ptr obj);
         static TickDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataReader_ptr _this () { return this; }

         virtual DDS::Long read (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (TickSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance) = 0;

      protected:
         TickDataReader () {};
         ~TickDataReader () {};
      private:
         TickDataReader (const TickDataReader &);
         TickDataReader & operator = (const TickDataReader &);
      };

      class TickDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef TickDataReaderView_ptr _ptr_type;
         typedef TickDataReaderView_var _var_type;

         static TickDataReaderView_ptr _duplicate (TickDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static TickDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (TickSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance) = 0;

      protected:
         TickDataReaderView () {};
         ~TickDataReaderView () {};
      private:
         TickDataReaderView (const TickDataReaderView &);
         TickDataReaderView & operator = (const TickDataReaderView &);
      };

   }
   namespace Physiology
   {

      class NodeTypeSupportInterface;

      typedef NodeTypeSupportInterface * NodeTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < NodeTypeSupportInterface> NodeTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < NodeTypeSupportInterface> NodeTypeSupportInterface_out;


      class NodeDataWriter;

      typedef NodeDataWriter * NodeDataWriter_ptr;
      typedef DDS_DCPSInterface_var < NodeDataWriter> NodeDataWriter_var;
      typedef DDS_DCPSInterface_out < NodeDataWriter> NodeDataWriter_out;


      class NodeDataReader;

      typedef NodeDataReader * NodeDataReader_ptr;
      typedef DDS_DCPSInterface_var < NodeDataReader> NodeDataReader_var;
      typedef DDS_DCPSInterface_out < NodeDataReader> NodeDataReader_out;


      class NodeDataReaderView;

      typedef NodeDataReaderView * NodeDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < NodeDataReaderView> NodeDataReaderView_var;
      typedef DDS_DCPSInterface_out < NodeDataReaderView> NodeDataReaderView_out;


      class HighFrequencyNodeTypeSupportInterface;

      typedef HighFrequencyNodeTypeSupportInterface * HighFrequencyNodeTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyNodeTypeSupportInterface> HighFrequencyNodeTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < HighFrequencyNodeTypeSupportInterface> HighFrequencyNodeTypeSupportInterface_out;


      class HighFrequencyNodeDataWriter;

      typedef HighFrequencyNodeDataWriter * HighFrequencyNodeDataWriter_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyNodeDataWriter> HighFrequencyNodeDataWriter_var;
      typedef DDS_DCPSInterface_out < HighFrequencyNodeDataWriter> HighFrequencyNodeDataWriter_out;


      class HighFrequencyNodeDataReader;

      typedef HighFrequencyNodeDataReader * HighFrequencyNodeDataReader_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyNodeDataReader> HighFrequencyNodeDataReader_var;
      typedef DDS_DCPSInterface_out < HighFrequencyNodeDataReader> HighFrequencyNodeDataReader_out;


      class HighFrequencyNodeDataReaderView;

      typedef HighFrequencyNodeDataReaderView * HighFrequencyNodeDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyNodeDataReaderView> HighFrequencyNodeDataReaderView_var;
      typedef DDS_DCPSInterface_out < HighFrequencyNodeDataReaderView> HighFrequencyNodeDataReaderView_out;

      struct NodeSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < Node, struct NodeSeq_uniq_> NodeSeq;
      typedef DDS_DCPSSequence_var < NodeSeq> NodeSeq_var;
      typedef DDS_DCPSSequence_out < NodeSeq> NodeSeq_out;
      class NodeTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef NodeTypeSupportInterface_ptr _ptr_type;
         typedef NodeTypeSupportInterface_var _var_type;

         static NodeTypeSupportInterface_ptr _duplicate (NodeTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static NodeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static NodeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static NodeTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         NodeTypeSupportInterface_ptr _this () { return this; }


      protected:
         NodeTypeSupportInterface () {};
         ~NodeTypeSupportInterface () {};
      private:
         NodeTypeSupportInterface (const NodeTypeSupportInterface &);
         NodeTypeSupportInterface & operator = (const NodeTypeSupportInterface &);
      };

      class NodeDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef NodeDataWriter_ptr _ptr_type;
         typedef NodeDataWriter_var _var_type;

         static NodeDataWriter_ptr _duplicate (NodeDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static NodeDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static NodeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static NodeDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         NodeDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const Node& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const Node& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const Node& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const Node& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const Node& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const Node& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const Node& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const Node& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const Node& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const Node& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (Node& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Node& instance_data) = 0;

      protected:
         NodeDataWriter () {};
         ~NodeDataWriter () {};
      private:
         NodeDataWriter (const NodeDataWriter &);
         NodeDataWriter & operator = (const NodeDataWriter &);
      };

      class NodeDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef NodeDataReader_ptr _ptr_type;
         typedef NodeDataReader_var _var_type;

         static NodeDataReader_ptr _duplicate (NodeDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static NodeDataReader_ptr _narrow (DDS::Object_ptr obj);
         static NodeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static NodeDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         NodeDataReader_ptr _this () { return this; }

         virtual DDS::Long read (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Node& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Node& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Node& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Node& instance) = 0;

      protected:
         NodeDataReader () {};
         ~NodeDataReader () {};
      private:
         NodeDataReader (const NodeDataReader &);
         NodeDataReader & operator = (const NodeDataReader &);
      };

      class NodeDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef NodeDataReaderView_ptr _ptr_type;
         typedef NodeDataReaderView_var _var_type;

         static NodeDataReaderView_ptr _duplicate (NodeDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static NodeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static NodeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static NodeDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         NodeDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Node& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Node& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (NodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Node& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Node& instance) = 0;

      protected:
         NodeDataReaderView () {};
         ~NodeDataReaderView () {};
      private:
         NodeDataReaderView (const NodeDataReaderView &);
         NodeDataReaderView & operator = (const NodeDataReaderView &);
      };

      struct HighFrequencyNodeSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < HighFrequencyNode, struct HighFrequencyNodeSeq_uniq_> HighFrequencyNodeSeq;
      typedef DDS_DCPSSequence_var < HighFrequencyNodeSeq> HighFrequencyNodeSeq_var;
      typedef DDS_DCPSSequence_out < HighFrequencyNodeSeq> HighFrequencyNodeSeq_out;
      class HighFrequencyNodeTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef HighFrequencyNodeTypeSupportInterface_ptr _ptr_type;
         typedef HighFrequencyNodeTypeSupportInterface_var _var_type;

         static HighFrequencyNodeTypeSupportInterface_ptr _duplicate (HighFrequencyNodeTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyNodeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyNodeTypeSupportInterface_ptr _this () { return this; }


      protected:
         HighFrequencyNodeTypeSupportInterface () {};
         ~HighFrequencyNodeTypeSupportInterface () {};
      private:
         HighFrequencyNodeTypeSupportInterface (const HighFrequencyNodeTypeSupportInterface &);
         HighFrequencyNodeTypeSupportInterface & operator = (const HighFrequencyNodeTypeSupportInterface &);
      };

      class HighFrequencyNodeDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef HighFrequencyNodeDataWriter_ptr _ptr_type;
         typedef HighFrequencyNodeDataWriter_var _var_type;

         static HighFrequencyNodeDataWriter_ptr _duplicate (HighFrequencyNodeDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyNodeDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyNodeDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const HighFrequencyNode& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const HighFrequencyNode& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const HighFrequencyNode& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const HighFrequencyNode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const HighFrequencyNode& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const HighFrequencyNode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const HighFrequencyNode& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const HighFrequencyNode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const HighFrequencyNode& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const HighFrequencyNode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (HighFrequencyNode& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyNode& instance_data) = 0;

      protected:
         HighFrequencyNodeDataWriter () {};
         ~HighFrequencyNodeDataWriter () {};
      private:
         HighFrequencyNodeDataWriter (const HighFrequencyNodeDataWriter &);
         HighFrequencyNodeDataWriter & operator = (const HighFrequencyNodeDataWriter &);
      };

      class HighFrequencyNodeDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef HighFrequencyNodeDataReader_ptr _ptr_type;
         typedef HighFrequencyNodeDataReader_var _var_type;

         static HighFrequencyNodeDataReader_ptr _duplicate (HighFrequencyNodeDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyNodeDataReader_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyNodeDataReader_ptr _this () { return this; }

         virtual DDS::Long read (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (HighFrequencyNode& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (HighFrequencyNode& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (HighFrequencyNode& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyNode& instance) = 0;

      protected:
         HighFrequencyNodeDataReader () {};
         ~HighFrequencyNodeDataReader () {};
      private:
         HighFrequencyNodeDataReader (const HighFrequencyNodeDataReader &);
         HighFrequencyNodeDataReader & operator = (const HighFrequencyNodeDataReader &);
      };

      class HighFrequencyNodeDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef HighFrequencyNodeDataReaderView_ptr _ptr_type;
         typedef HighFrequencyNodeDataReaderView_var _var_type;

         static HighFrequencyNodeDataReaderView_ptr _duplicate (HighFrequencyNodeDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyNodeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyNodeDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyNodeDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (HighFrequencyNode& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (HighFrequencyNode& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (HighFrequencyNodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (HighFrequencyNode& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyNode& instance) = 0;

      protected:
         HighFrequencyNodeDataReaderView () {};
         ~HighFrequencyNodeDataReaderView () {};
      private:
         HighFrequencyNodeDataReaderView (const HighFrequencyNodeDataReaderView &);
         HighFrequencyNodeDataReaderView & operator = (const HighFrequencyNodeDataReaderView &);
      };

   }
   namespace PatientAction
   {
      namespace BioGears
      {

         class CommandTypeSupportInterface;

         typedef CommandTypeSupportInterface * CommandTypeSupportInterface_ptr;
         typedef DDS_DCPSInterface_var < CommandTypeSupportInterface> CommandTypeSupportInterface_var;
         typedef DDS_DCPSInterface_out < CommandTypeSupportInterface> CommandTypeSupportInterface_out;


         class CommandDataWriter;

         typedef CommandDataWriter * CommandDataWriter_ptr;
         typedef DDS_DCPSInterface_var < CommandDataWriter> CommandDataWriter_var;
         typedef DDS_DCPSInterface_out < CommandDataWriter> CommandDataWriter_out;


         class CommandDataReader;

         typedef CommandDataReader * CommandDataReader_ptr;
         typedef DDS_DCPSInterface_var < CommandDataReader> CommandDataReader_var;
         typedef DDS_DCPSInterface_out < CommandDataReader> CommandDataReader_out;


         class CommandDataReaderView;

         typedef CommandDataReaderView * CommandDataReaderView_ptr;
         typedef DDS_DCPSInterface_var < CommandDataReaderView> CommandDataReaderView_var;
         typedef DDS_DCPSInterface_out < CommandDataReaderView> CommandDataReaderView_out;

         struct CommandSeq_uniq_ {};
         typedef DDS_DCPSUVLSeq < Command, struct CommandSeq_uniq_> CommandSeq;
         typedef DDS_DCPSSequence_var < CommandSeq> CommandSeq_var;
         typedef DDS_DCPSSequence_out < CommandSeq> CommandSeq_out;
         class CommandTypeSupportInterface
         :
            virtual public DDS::TypeSupport
         { 
         public:
            typedef CommandTypeSupportInterface_ptr _ptr_type;
            typedef CommandTypeSupportInterface_var _var_type;

            static CommandTypeSupportInterface_ptr _duplicate (CommandTypeSupportInterface_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static CommandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
            static CommandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static CommandTypeSupportInterface_ptr _nil () { return 0; }
            static const char * _local_id;
            CommandTypeSupportInterface_ptr _this () { return this; }


         protected:
            CommandTypeSupportInterface () {};
            ~CommandTypeSupportInterface () {};
         private:
            CommandTypeSupportInterface (const CommandTypeSupportInterface &);
            CommandTypeSupportInterface & operator = (const CommandTypeSupportInterface &);
         };

         class CommandDataWriter
         :
            virtual public DDS::DataWriter
         { 
         public:
            typedef CommandDataWriter_ptr _ptr_type;
            typedef CommandDataWriter_var _var_type;

            static CommandDataWriter_ptr _duplicate (CommandDataWriter_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static CommandDataWriter_ptr _narrow (DDS::Object_ptr obj);
            static CommandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static CommandDataWriter_ptr _nil () { return 0; }
            static const char * _local_id;
            CommandDataWriter_ptr _this () { return this; }

            virtual DDS::LongLong register_instance (const Command& instance_data) = 0;
            virtual DDS::LongLong register_instance_w_timestamp (const Command& instance_data, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long unregister_instance (const Command& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long unregister_instance_w_timestamp (const Command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long write (const Command& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long write_w_timestamp (const Command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long dispose (const Command& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long dispose_w_timestamp (const Command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long writedispose (const Command& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long writedispose_w_timestamp (const Command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long get_key_value (Command& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Command& instance_data) = 0;

         protected:
            CommandDataWriter () {};
            ~CommandDataWriter () {};
         private:
            CommandDataWriter (const CommandDataWriter &);
            CommandDataWriter & operator = (const CommandDataWriter &);
         };

         class CommandDataReader
         :
            virtual public DDS::DataReader
         { 
         public:
            typedef CommandDataReader_ptr _ptr_type;
            typedef CommandDataReader_var _var_type;

            static CommandDataReader_ptr _duplicate (CommandDataReader_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static CommandDataReader_ptr _narrow (DDS::Object_ptr obj);
            static CommandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static CommandDataReader_ptr _nil () { return 0; }
            static const char * _local_id;
            CommandDataReader_ptr _this () { return this; }

            virtual DDS::Long read (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Command& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Command& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Command& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Command& instance) = 0;

         protected:
            CommandDataReader () {};
            ~CommandDataReader () {};
         private:
            CommandDataReader (const CommandDataReader &);
            CommandDataReader & operator = (const CommandDataReader &);
         };

         class CommandDataReaderView
         :
            virtual public DDS::DataReaderView
         { 
         public:
            typedef CommandDataReaderView_ptr _ptr_type;
            typedef CommandDataReaderView_var _var_type;

            static CommandDataReaderView_ptr _duplicate (CommandDataReaderView_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static CommandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
            static CommandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static CommandDataReaderView_ptr _nil () { return 0; }
            static const char * _local_id;
            CommandDataReaderView_ptr _this () { return this; }

            virtual DDS::Long read (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Command& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Command& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (CommandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Command& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Command& instance) = 0;

         protected:
            CommandDataReaderView () {};
            ~CommandDataReaderView () {};
         private:
            CommandDataReaderView (const CommandDataReaderView &);
            CommandDataReaderView & operator = (const CommandDataReaderView &);
         };

      }
   }
   namespace Performance
   {

      class xAPIModifierTypeSupportInterface;

      typedef xAPIModifierTypeSupportInterface * xAPIModifierTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < xAPIModifierTypeSupportInterface> xAPIModifierTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < xAPIModifierTypeSupportInterface> xAPIModifierTypeSupportInterface_out;


      class xAPIModifierDataWriter;

      typedef xAPIModifierDataWriter * xAPIModifierDataWriter_ptr;
      typedef DDS_DCPSInterface_var < xAPIModifierDataWriter> xAPIModifierDataWriter_var;
      typedef DDS_DCPSInterface_out < xAPIModifierDataWriter> xAPIModifierDataWriter_out;


      class xAPIModifierDataReader;

      typedef xAPIModifierDataReader * xAPIModifierDataReader_ptr;
      typedef DDS_DCPSInterface_var < xAPIModifierDataReader> xAPIModifierDataReader_var;
      typedef DDS_DCPSInterface_out < xAPIModifierDataReader> xAPIModifierDataReader_out;


      class xAPIModifierDataReaderView;

      typedef xAPIModifierDataReaderView * xAPIModifierDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < xAPIModifierDataReaderView> xAPIModifierDataReaderView_var;
      typedef DDS_DCPSInterface_out < xAPIModifierDataReaderView> xAPIModifierDataReaderView_out;


      class StatementTypeSupportInterface;

      typedef StatementTypeSupportInterface * StatementTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < StatementTypeSupportInterface> StatementTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < StatementTypeSupportInterface> StatementTypeSupportInterface_out;


      class StatementDataWriter;

      typedef StatementDataWriter * StatementDataWriter_ptr;
      typedef DDS_DCPSInterface_var < StatementDataWriter> StatementDataWriter_var;
      typedef DDS_DCPSInterface_out < StatementDataWriter> StatementDataWriter_out;


      class StatementDataReader;

      typedef StatementDataReader * StatementDataReader_ptr;
      typedef DDS_DCPSInterface_var < StatementDataReader> StatementDataReader_var;
      typedef DDS_DCPSInterface_out < StatementDataReader> StatementDataReader_out;


      class StatementDataReaderView;

      typedef StatementDataReaderView * StatementDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < StatementDataReaderView> StatementDataReaderView_var;
      typedef DDS_DCPSInterface_out < StatementDataReaderView> StatementDataReaderView_out;

      struct xAPIModifierSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < xAPIModifier, struct xAPIModifierSeq_uniq_> xAPIModifierSeq;
      typedef DDS_DCPSSequence_var < xAPIModifierSeq> xAPIModifierSeq_var;
      typedef DDS_DCPSSequence_out < xAPIModifierSeq> xAPIModifierSeq_out;
      class xAPIModifierTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef xAPIModifierTypeSupportInterface_ptr _ptr_type;
         typedef xAPIModifierTypeSupportInterface_var _var_type;

         static xAPIModifierTypeSupportInterface_ptr _duplicate (xAPIModifierTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static xAPIModifierTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static xAPIModifierTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static xAPIModifierTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         xAPIModifierTypeSupportInterface_ptr _this () { return this; }


      protected:
         xAPIModifierTypeSupportInterface () {};
         ~xAPIModifierTypeSupportInterface () {};
      private:
         xAPIModifierTypeSupportInterface (const xAPIModifierTypeSupportInterface &);
         xAPIModifierTypeSupportInterface & operator = (const xAPIModifierTypeSupportInterface &);
      };

      class xAPIModifierDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef xAPIModifierDataWriter_ptr _ptr_type;
         typedef xAPIModifierDataWriter_var _var_type;

         static xAPIModifierDataWriter_ptr _duplicate (xAPIModifierDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static xAPIModifierDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static xAPIModifierDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static xAPIModifierDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         xAPIModifierDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const xAPIModifier& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const xAPIModifier& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const xAPIModifier& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const xAPIModifier& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const xAPIModifier& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const xAPIModifier& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const xAPIModifier& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const xAPIModifier& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const xAPIModifier& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const xAPIModifier& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (xAPIModifier& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const xAPIModifier& instance_data) = 0;

      protected:
         xAPIModifierDataWriter () {};
         ~xAPIModifierDataWriter () {};
      private:
         xAPIModifierDataWriter (const xAPIModifierDataWriter &);
         xAPIModifierDataWriter & operator = (const xAPIModifierDataWriter &);
      };

      class xAPIModifierDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef xAPIModifierDataReader_ptr _ptr_type;
         typedef xAPIModifierDataReader_var _var_type;

         static xAPIModifierDataReader_ptr _duplicate (xAPIModifierDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static xAPIModifierDataReader_ptr _narrow (DDS::Object_ptr obj);
         static xAPIModifierDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static xAPIModifierDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         xAPIModifierDataReader_ptr _this () { return this; }

         virtual DDS::Long read (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (xAPIModifier& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (xAPIModifier& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (xAPIModifier& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const xAPIModifier& instance) = 0;

      protected:
         xAPIModifierDataReader () {};
         ~xAPIModifierDataReader () {};
      private:
         xAPIModifierDataReader (const xAPIModifierDataReader &);
         xAPIModifierDataReader & operator = (const xAPIModifierDataReader &);
      };

      class xAPIModifierDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef xAPIModifierDataReaderView_ptr _ptr_type;
         typedef xAPIModifierDataReaderView_var _var_type;

         static xAPIModifierDataReaderView_ptr _duplicate (xAPIModifierDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static xAPIModifierDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static xAPIModifierDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static xAPIModifierDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         xAPIModifierDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (xAPIModifier& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (xAPIModifier& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (xAPIModifierSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (xAPIModifier& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const xAPIModifier& instance) = 0;

      protected:
         xAPIModifierDataReaderView () {};
         ~xAPIModifierDataReaderView () {};
      private:
         xAPIModifierDataReaderView (const xAPIModifierDataReaderView &);
         xAPIModifierDataReaderView & operator = (const xAPIModifierDataReaderView &);
      };

      struct StatementSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < Statement, struct StatementSeq_uniq_> StatementSeq;
      typedef DDS_DCPSSequence_var < StatementSeq> StatementSeq_var;
      typedef DDS_DCPSSequence_out < StatementSeq> StatementSeq_out;
      class StatementTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef StatementTypeSupportInterface_ptr _ptr_type;
         typedef StatementTypeSupportInterface_var _var_type;

         static StatementTypeSupportInterface_ptr _duplicate (StatementTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StatementTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static StatementTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StatementTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         StatementTypeSupportInterface_ptr _this () { return this; }


      protected:
         StatementTypeSupportInterface () {};
         ~StatementTypeSupportInterface () {};
      private:
         StatementTypeSupportInterface (const StatementTypeSupportInterface &);
         StatementTypeSupportInterface & operator = (const StatementTypeSupportInterface &);
      };

      class StatementDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef StatementDataWriter_ptr _ptr_type;
         typedef StatementDataWriter_var _var_type;

         static StatementDataWriter_ptr _duplicate (StatementDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StatementDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static StatementDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StatementDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         StatementDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const Statement& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const Statement& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const Statement& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const Statement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const Statement& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const Statement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const Statement& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const Statement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const Statement& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const Statement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (Statement& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Statement& instance_data) = 0;

      protected:
         StatementDataWriter () {};
         ~StatementDataWriter () {};
      private:
         StatementDataWriter (const StatementDataWriter &);
         StatementDataWriter & operator = (const StatementDataWriter &);
      };

      class StatementDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef StatementDataReader_ptr _ptr_type;
         typedef StatementDataReader_var _var_type;

         static StatementDataReader_ptr _duplicate (StatementDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StatementDataReader_ptr _narrow (DDS::Object_ptr obj);
         static StatementDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StatementDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         StatementDataReader_ptr _this () { return this; }

         virtual DDS::Long read (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Statement& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Statement& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Statement& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Statement& instance) = 0;

      protected:
         StatementDataReader () {};
         ~StatementDataReader () {};
      private:
         StatementDataReader (const StatementDataReader &);
         StatementDataReader & operator = (const StatementDataReader &);
      };

      class StatementDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef StatementDataReaderView_ptr _ptr_type;
         typedef StatementDataReaderView_var _var_type;

         static StatementDataReaderView_ptr _duplicate (StatementDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StatementDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static StatementDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StatementDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         StatementDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Statement& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Statement& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (StatementSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Statement& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Statement& instance) = 0;

      protected:
         StatementDataReaderView () {};
         ~StatementDataReaderView () {};
      private:
         StatementDataReaderView (const StatementDataReaderView &);
         StatementDataReaderView & operator = (const StatementDataReaderView &);
      };

   }
}




#endif 
