//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: AMMDcps.h
//  Source: AMMDcps.idl
//  Generated: Sun Apr 30 18:36:00 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _AMMDCPS_H_
#define _AMMDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "AMM.h"


namespace AMM
{
   namespace Simulation
   {

      class TickTypeSupportInterface;

      typedef TickTypeSupportInterface * TickTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < TickTypeSupportInterface> TickTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < TickTypeSupportInterface> TickTypeSupportInterface_out;


      class TickDataWriter;

      typedef TickDataWriter * TickDataWriter_ptr;
      typedef DDS_DCPSInterface_var < TickDataWriter> TickDataWriter_var;
      typedef DDS_DCPSInterface_out < TickDataWriter> TickDataWriter_out;


      class TickDataReader;

      typedef TickDataReader * TickDataReader_ptr;
      typedef DDS_DCPSInterface_var < TickDataReader> TickDataReader_var;
      typedef DDS_DCPSInterface_out < TickDataReader> TickDataReader_out;


      class TickDataReaderView;

      typedef TickDataReaderView * TickDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < TickDataReaderView> TickDataReaderView_var;
      typedef DDS_DCPSInterface_out < TickDataReaderView> TickDataReaderView_out;

      struct TickSeq_uniq_ {};
      typedef DDS_DCPSUFLSeq < Tick, struct TickSeq_uniq_> TickSeq;
      typedef DDS_DCPSSequence_var < TickSeq> TickSeq_var;
      typedef DDS_DCPSSequence_out < TickSeq> TickSeq_out;
      class TickTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef TickTypeSupportInterface_ptr _ptr_type;
         typedef TickTypeSupportInterface_var _var_type;

         static TickTypeSupportInterface_ptr _duplicate (TickTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static TickTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         TickTypeSupportInterface_ptr _this () { return this; }


      protected:
         TickTypeSupportInterface () {};
         ~TickTypeSupportInterface () {};
      private:
         TickTypeSupportInterface (const TickTypeSupportInterface &);
         TickTypeSupportInterface & operator = (const TickTypeSupportInterface &);
      };

      class TickDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef TickDataWriter_ptr _ptr_type;
         typedef TickDataWriter_var _var_type;

         static TickDataWriter_ptr _duplicate (TickDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static TickDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const Tick& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const Tick& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const Tick& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const Tick& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance_data) = 0;

      protected:
         TickDataWriter () {};
         ~TickDataWriter () {};
      private:
         TickDataWriter (const TickDataWriter &);
         TickDataWriter & operator = (const TickDataWriter &);
      };

      class TickDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef TickDataReader_ptr _ptr_type;
         typedef TickDataReader_var _var_type;

         static TickDataReader_ptr _duplicate (TickDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataReader_ptr _narrow (DDS::Object_ptr obj);
         static TickDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataReader_ptr _this () { return this; }

         virtual DDS::Long read (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (TickSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance) = 0;

      protected:
         TickDataReader () {};
         ~TickDataReader () {};
      private:
         TickDataReader (const TickDataReader &);
         TickDataReader & operator = (const TickDataReader &);
      };

      class TickDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef TickDataReaderView_ptr _ptr_type;
         typedef TickDataReaderView_var _var_type;

         static TickDataReaderView_ptr _duplicate (TickDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static TickDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static TickDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static TickDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         TickDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Tick& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (TickSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (TickSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Tick& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Tick& instance) = 0;

      protected:
         TickDataReaderView () {};
         ~TickDataReaderView () {};
      private:
         TickDataReaderView (const TickDataReaderView &);
         TickDataReaderView & operator = (const TickDataReaderView &);
      };

   }
   namespace Physiology
   {

      class DataTypeSupportInterface;

      typedef DataTypeSupportInterface * DataTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < DataTypeSupportInterface> DataTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < DataTypeSupportInterface> DataTypeSupportInterface_out;


      class DataDataWriter;

      typedef DataDataWriter * DataDataWriter_ptr;
      typedef DDS_DCPSInterface_var < DataDataWriter> DataDataWriter_var;
      typedef DDS_DCPSInterface_out < DataDataWriter> DataDataWriter_out;


      class DataDataReader;

      typedef DataDataReader * DataDataReader_ptr;
      typedef DDS_DCPSInterface_var < DataDataReader> DataDataReader_var;
      typedef DDS_DCPSInterface_out < DataDataReader> DataDataReader_out;


      class DataDataReaderView;

      typedef DataDataReaderView * DataDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < DataDataReaderView> DataDataReaderView_var;
      typedef DDS_DCPSInterface_out < DataDataReaderView> DataDataReaderView_out;


      class HighFrequencyDataTypeSupportInterface;

      typedef HighFrequencyDataTypeSupportInterface * HighFrequencyDataTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyDataTypeSupportInterface> HighFrequencyDataTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < HighFrequencyDataTypeSupportInterface> HighFrequencyDataTypeSupportInterface_out;


      class HighFrequencyDataDataWriter;

      typedef HighFrequencyDataDataWriter * HighFrequencyDataDataWriter_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyDataDataWriter> HighFrequencyDataDataWriter_var;
      typedef DDS_DCPSInterface_out < HighFrequencyDataDataWriter> HighFrequencyDataDataWriter_out;


      class HighFrequencyDataDataReader;

      typedef HighFrequencyDataDataReader * HighFrequencyDataDataReader_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyDataDataReader> HighFrequencyDataDataReader_var;
      typedef DDS_DCPSInterface_out < HighFrequencyDataDataReader> HighFrequencyDataDataReader_out;


      class HighFrequencyDataDataReaderView;

      typedef HighFrequencyDataDataReaderView * HighFrequencyDataDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < HighFrequencyDataDataReaderView> HighFrequencyDataDataReaderView_var;
      typedef DDS_DCPSInterface_out < HighFrequencyDataDataReaderView> HighFrequencyDataDataReaderView_out;

      struct DataSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < Data, struct DataSeq_uniq_> DataSeq;
      typedef DDS_DCPSSequence_var < DataSeq> DataSeq_var;
      typedef DDS_DCPSSequence_out < DataSeq> DataSeq_out;
      class DataTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef DataTypeSupportInterface_ptr _ptr_type;
         typedef DataTypeSupportInterface_var _var_type;

         static DataTypeSupportInterface_ptr _duplicate (DataTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DataTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static DataTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DataTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         DataTypeSupportInterface_ptr _this () { return this; }


      protected:
         DataTypeSupportInterface () {};
         ~DataTypeSupportInterface () {};
      private:
         DataTypeSupportInterface (const DataTypeSupportInterface &);
         DataTypeSupportInterface & operator = (const DataTypeSupportInterface &);
      };

      class DataDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef DataDataWriter_ptr _ptr_type;
         typedef DataDataWriter_var _var_type;

         static DataDataWriter_ptr _duplicate (DataDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DataDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static DataDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DataDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         DataDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const Data& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const Data& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const Data& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const Data& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const Data& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const Data& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const Data& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const Data& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const Data& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const Data& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (Data& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Data& instance_data) = 0;

      protected:
         DataDataWriter () {};
         ~DataDataWriter () {};
      private:
         DataDataWriter (const DataDataWriter &);
         DataDataWriter & operator = (const DataDataWriter &);
      };

      class DataDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef DataDataReader_ptr _ptr_type;
         typedef DataDataReader_var _var_type;

         static DataDataReader_ptr _duplicate (DataDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DataDataReader_ptr _narrow (DDS::Object_ptr obj);
         static DataDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DataDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         DataDataReader_ptr _this () { return this; }

         virtual DDS::Long read (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Data& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Data& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (DataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Data& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Data& instance) = 0;

      protected:
         DataDataReader () {};
         ~DataDataReader () {};
      private:
         DataDataReader (const DataDataReader &);
         DataDataReader & operator = (const DataDataReader &);
      };

      class DataDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef DataDataReaderView_ptr _ptr_type;
         typedef DataDataReaderView_var _var_type;

         static DataDataReaderView_ptr _duplicate (DataDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DataDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static DataDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DataDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         DataDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (Data& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (Data& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (DataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (DataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (Data& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const Data& instance) = 0;

      protected:
         DataDataReaderView () {};
         ~DataDataReaderView () {};
      private:
         DataDataReaderView (const DataDataReaderView &);
         DataDataReaderView & operator = (const DataDataReaderView &);
      };

      struct HighFrequencyDataSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < HighFrequencyData, struct HighFrequencyDataSeq_uniq_> HighFrequencyDataSeq;
      typedef DDS_DCPSSequence_var < HighFrequencyDataSeq> HighFrequencyDataSeq_var;
      typedef DDS_DCPSSequence_out < HighFrequencyDataSeq> HighFrequencyDataSeq_out;
      class HighFrequencyDataTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef HighFrequencyDataTypeSupportInterface_ptr _ptr_type;
         typedef HighFrequencyDataTypeSupportInterface_var _var_type;

         static HighFrequencyDataTypeSupportInterface_ptr _duplicate (HighFrequencyDataTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyDataTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyDataTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyDataTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyDataTypeSupportInterface_ptr _this () { return this; }


      protected:
         HighFrequencyDataTypeSupportInterface () {};
         ~HighFrequencyDataTypeSupportInterface () {};
      private:
         HighFrequencyDataTypeSupportInterface (const HighFrequencyDataTypeSupportInterface &);
         HighFrequencyDataTypeSupportInterface & operator = (const HighFrequencyDataTypeSupportInterface &);
      };

      class HighFrequencyDataDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef HighFrequencyDataDataWriter_ptr _ptr_type;
         typedef HighFrequencyDataDataWriter_var _var_type;

         static HighFrequencyDataDataWriter_ptr _duplicate (HighFrequencyDataDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyDataDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyDataDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const HighFrequencyData& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const HighFrequencyData& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const HighFrequencyData& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const HighFrequencyData& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const HighFrequencyData& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const HighFrequencyData& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const HighFrequencyData& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const HighFrequencyData& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const HighFrequencyData& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const HighFrequencyData& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (HighFrequencyData& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyData& instance_data) = 0;

      protected:
         HighFrequencyDataDataWriter () {};
         ~HighFrequencyDataDataWriter () {};
      private:
         HighFrequencyDataDataWriter (const HighFrequencyDataDataWriter &);
         HighFrequencyDataDataWriter & operator = (const HighFrequencyDataDataWriter &);
      };

      class HighFrequencyDataDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef HighFrequencyDataDataReader_ptr _ptr_type;
         typedef HighFrequencyDataDataReader_var _var_type;

         static HighFrequencyDataDataReader_ptr _duplicate (HighFrequencyDataDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyDataDataReader_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyDataDataReader_ptr _this () { return this; }

         virtual DDS::Long read (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (HighFrequencyData& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (HighFrequencyData& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (HighFrequencyData& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyData& instance) = 0;

      protected:
         HighFrequencyDataDataReader () {};
         ~HighFrequencyDataDataReader () {};
      private:
         HighFrequencyDataDataReader (const HighFrequencyDataDataReader &);
         HighFrequencyDataDataReader & operator = (const HighFrequencyDataDataReader &);
      };

      class HighFrequencyDataDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef HighFrequencyDataDataReaderView_ptr _ptr_type;
         typedef HighFrequencyDataDataReaderView_var _var_type;

         static HighFrequencyDataDataReaderView_ptr _duplicate (HighFrequencyDataDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static HighFrequencyDataDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static HighFrequencyDataDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         HighFrequencyDataDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (HighFrequencyData& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (HighFrequencyData& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (HighFrequencyDataSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (HighFrequencyData& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const HighFrequencyData& instance) = 0;

      protected:
         HighFrequencyDataDataReaderView () {};
         ~HighFrequencyDataDataReaderView () {};
      private:
         HighFrequencyDataDataReaderView (const HighFrequencyDataDataReaderView &);
         HighFrequencyDataDataReaderView & operator = (const HighFrequencyDataDataReaderView &);
      };

   }
}




#endif 
